
MyRcCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d34  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f04  08004f04  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004f04  08004f04  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f04  08004f04  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f00  20000014  08004f20  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f14  08004f20  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017229  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000302c  00000000  00000000  00037266  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  0003a298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  0003b600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f06  00000000  00000000  0003c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000109f4  00000000  00000000  000556f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092bf0  00000000  00000000  000660ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000505c  00000000  00000000  000f8d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e2c 	.word	0x08004e2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08004e2c 	.word	0x08004e2c

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of statusLedTask */
  statusLedTaskHandle = osThreadNew(StatusLedTask, NULL, &statusLedTask_attributes);
 8000154:	4a08      	ldr	r2, [pc, #32]	; (8000178 <MX_FREERTOS_Init+0x28>)
 8000156:	2100      	movs	r1, #0
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <MX_FREERTOS_Init+0x2c>)
 800015a:	f002 f925 	bl	80023a8 <osThreadNew>
 800015e:	4602      	mov	r2, r0
 8000160:	4b07      	ldr	r3, [pc, #28]	; (8000180 <MX_FREERTOS_Init+0x30>)
 8000162:	601a      	str	r2, [r3, #0]

  /* creation of rcHandlerTask */
  rcHandlerTaskHandle = osThreadNew(RcHandlerTask, NULL, &rcHandlerTask_attributes);
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <MX_FREERTOS_Init+0x34>)
 8000166:	2100      	movs	r1, #0
 8000168:	4807      	ldr	r0, [pc, #28]	; (8000188 <MX_FREERTOS_Init+0x38>)
 800016a:	f002 f91d 	bl	80023a8 <osThreadNew>
 800016e:	4602      	mov	r2, r0
 8000170:	4b06      	ldr	r3, [pc, #24]	; (800018c <MX_FREERTOS_Init+0x3c>)
 8000172:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	08004ea4 	.word	0x08004ea4
 800017c:	08000191 	.word	0x08000191
 8000180:	2000193c 	.word	0x2000193c
 8000184:	08004ec8 	.word	0x08004ec8
 8000188:	080001b1 	.word	0x080001b1
 800018c:	20001938 	.word	0x20001938

08000190 <StatusLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StatusLedTask */
void StatusLedTask(void *argument)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StatusLedTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(status_led_GPIO_Port, status_led_Pin);
 8000198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800019c:	4803      	ldr	r0, [pc, #12]	; (80001ac <StatusLedTask+0x1c>)
 800019e:	f000 fdb7 	bl	8000d10 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f002 f9a9 	bl	80024fc <osDelay>
    HAL_GPIO_TogglePin(status_led_GPIO_Port, status_led_Pin);
 80001aa:	e7f5      	b.n	8000198 <StatusLedTask+0x8>
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <RcHandlerTask>:

uint8_t ibus_str[80];
uint8_t *hex_tb = (uint8_t *)"0123456789ABCDEF";

void RcHandlerTask(void *argument)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b08c      	sub	sp, #48	; 0x30
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RcHandlerTask */
  uint8_t ibus_data[32], i, j;
  uint8_t *ch = ibus_data + 2;
 80001b8:	f107 0308 	add.w	r3, r7, #8
 80001bc:	3302      	adds	r3, #2
 80001be:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Infinite loop */
  for(;;)
  {
    HAL_UART_Receive_IT(&huart1, ibus_data, sizeof(ibus_data));
 80001c0:	f107 0308 	add.w	r3, r7, #8
 80001c4:	2220      	movs	r2, #32
 80001c6:	4619      	mov	r1, r3
 80001c8:	4839      	ldr	r0, [pc, #228]	; (80002b0 <RcHandlerTask+0x100>)
 80001ca:	f001 fd30 	bl	8001c2e <HAL_UART_Receive_IT>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80001ce:	f04f 31ff 	mov.w	r1, #4294967295
 80001d2:	2001      	movs	r0, #1
 80001d4:	f003 fe06 	bl	8003de4 <ulTaskNotifyTake>
    for (i = 0, j = 0; i < (sizeof(ibus_data)-2); i+=2, j+=5) {
 80001d8:	2300      	movs	r3, #0
 80001da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80001de:	2300      	movs	r3, #0
 80001e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80001e4:	e050      	b.n	8000288 <RcHandlerTask+0xd8>
      ibus_str[j+0] = *(hex_tb + (ch[i+0] >> 4));
 80001e6:	4b33      	ldr	r3, [pc, #204]	; (80002b4 <RcHandlerTask+0x104>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80001ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80001f0:	440a      	add	r2, r1
 80001f2:	7812      	ldrb	r2, [r2, #0]
 80001f4:	0912      	lsrs	r2, r2, #4
 80001f6:	b2d2      	uxtb	r2, r2
 80001f8:	441a      	add	r2, r3
 80001fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80001fe:	7811      	ldrb	r1, [r2, #0]
 8000200:	4a2d      	ldr	r2, [pc, #180]	; (80002b8 <RcHandlerTask+0x108>)
 8000202:	54d1      	strb	r1, [r2, r3]
      ibus_str[j+1] = *(hex_tb + (ch[i+0] & 0xF));
 8000204:	4b2b      	ldr	r3, [pc, #172]	; (80002b4 <RcHandlerTask+0x104>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800020c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800020e:	440b      	add	r3, r1
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	f003 030f 	and.w	r3, r3, #15
 8000216:	441a      	add	r2, r3
 8000218:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800021c:	3301      	adds	r3, #1
 800021e:	7811      	ldrb	r1, [r2, #0]
 8000220:	4a25      	ldr	r2, [pc, #148]	; (80002b8 <RcHandlerTask+0x108>)
 8000222:	54d1      	strb	r1, [r2, r3]
      ibus_str[j+2] = *(hex_tb + (ch[i+1] >> 4));
 8000224:	4b23      	ldr	r3, [pc, #140]	; (80002b4 <RcHandlerTask+0x104>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800022c:	3201      	adds	r2, #1
 800022e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000230:	440a      	add	r2, r1
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	0912      	lsrs	r2, r2, #4
 8000236:	b2d2      	uxtb	r2, r2
 8000238:	441a      	add	r2, r3
 800023a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800023e:	3302      	adds	r3, #2
 8000240:	7811      	ldrb	r1, [r2, #0]
 8000242:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <RcHandlerTask+0x108>)
 8000244:	54d1      	strb	r1, [r2, r3]
      ibus_str[j+3] = *(hex_tb + (ch[i+1] & 0xF));
 8000246:	4b1b      	ldr	r3, [pc, #108]	; (80002b4 <RcHandlerTask+0x104>)
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800024e:	3301      	adds	r3, #1
 8000250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000252:	440b      	add	r3, r1
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	441a      	add	r2, r3
 800025c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000260:	3303      	adds	r3, #3
 8000262:	7811      	ldrb	r1, [r2, #0]
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <RcHandlerTask+0x108>)
 8000266:	54d1      	strb	r1, [r2, r3]
      ibus_str[j+4] = '\t';
 8000268:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800026c:	3304      	adds	r3, #4
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <RcHandlerTask+0x108>)
 8000270:	2109      	movs	r1, #9
 8000272:	54d1      	strb	r1, [r2, r3]
    for (i = 0, j = 0; i < (sizeof(ibus_data)-2); i+=2, j+=5) {
 8000274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000278:	3302      	adds	r3, #2
 800027a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800027e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000282:	3305      	adds	r3, #5
 8000284:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800028c:	2b1d      	cmp	r3, #29
 800028e:	d9aa      	bls.n	80001e6 <RcHandlerTask+0x36>
    }
    ibus_str[75] = '\r';
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <RcHandlerTask+0x108>)
 8000292:	220d      	movs	r2, #13
 8000294:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    ibus_str[76] = '\n';
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <RcHandlerTask+0x108>)
 800029a:	220a      	movs	r2, #10
 800029c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    HAL_UART_Transmit(&huart1, ibus_str, 77, 120);
 80002a0:	2378      	movs	r3, #120	; 0x78
 80002a2:	224d      	movs	r2, #77	; 0x4d
 80002a4:	4904      	ldr	r1, [pc, #16]	; (80002b8 <RcHandlerTask+0x108>)
 80002a6:	4802      	ldr	r0, [pc, #8]	; (80002b0 <RcHandlerTask+0x100>)
 80002a8:	f001 fc2f 	bl	8001b0a <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, ibus_data, sizeof(ibus_data));
 80002ac:	e788      	b.n	80001c0 <RcHandlerTask+0x10>
 80002ae:	bf00      	nop
 80002b0:	20001e90 	.word	0x20001e90
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20001d9c 	.word	0x20001d9c

080002bc <HAL_UART_RxCpltCallback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

// 中断中调
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  if (huart == &huart1) {
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <HAL_UART_RxCpltCallback+0x24>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d105      	bne.n	80002d8 <HAL_UART_RxCpltCallback+0x1c>
    vTaskNotifyGiveFromISR(rcHandlerTaskHandle, NULL);
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <HAL_UART_RxCpltCallback+0x28>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 fdce 	bl	8003e74 <vTaskNotifyGiveFromISR>
  }
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20001e90 	.word	0x20001e90
 80002e4:	20001938 	.word	0x20001938

080002e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <MX_GPIO_Init+0x90>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0320 	and.w	r3, r3, #32
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_GPIO_Init+0x90>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_GPIO_Init+0x90>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_GPIO_Init+0x90>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_GPIO_Init+0x90>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a11      	ldr	r2, [pc, #68]	; (8000378 <MX_GPIO_Init+0x90>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_GPIO_Init+0x90>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800034a:	480c      	ldr	r0, [pc, #48]	; (800037c <MX_GPIO_Init+0x94>)
 800034c:	f000 fcc8 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = status_led_Pin;
 8000350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000356:	2311      	movs	r3, #17
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2302      	movs	r3, #2
 8000360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(status_led_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0x94>)
 800036a:	f000 fb5f 	bl	8000a2c <HAL_GPIO_Init>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000384:	f000 f9ca 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000388:	f000 f80b 	bl	80003a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038c:	f7ff ffac 	bl	80002e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000390:	f000 f920 	bl	80005d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000394:	f001 ffa2 	bl	80022dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000398:	f7ff feda 	bl	8000150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800039c:	f001 ffd0 	bl	8002340 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <main+0x20>

080003a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b090      	sub	sp, #64	; 0x40
 80003a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a8:	f107 0318 	add.w	r3, r7, #24
 80003ac:	2228      	movs	r2, #40	; 0x28
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f004 fd32 	bl	8004e1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d2:	2301      	movs	r3, #1
 80003d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d6:	2302      	movs	r3, #2
 80003d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e6:	f107 0318 	add.w	r3, r7, #24
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fcaa 	bl	8000d44 <HAL_RCC_OscConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f6:	f000 f82b 	bl	8000450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fa:	230f      	movs	r3, #15
 80003fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fe:	2302      	movs	r3, #2
 8000400:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800040a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2102      	movs	r1, #2
 8000414:	4618      	mov	r0, r3
 8000416:	f000 ff15 	bl	8001244 <HAL_RCC_ClockConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000420:	f000 f816 	bl	8000450 <Error_Handler>
  }
}
 8000424:	bf00      	nop
 8000426:	3740      	adds	r7, #64	; 0x40
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d101      	bne.n	8000442 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800043e:	f000 f983 	bl	8000748 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40000800 	.word	0x40000800

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <HAL_MspInit+0x5c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_MspInit+0x5c>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_MspInit+0x60>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <HAL_MspInit+0x60>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	6879      	ldr	r1, [r7, #4]
 80004d4:	201e      	movs	r0, #30
 80004d6:	f000 fa08 	bl	80008ea <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80004da:	201e      	movs	r0, #30
 80004dc:	f000 fa21 	bl	8000922 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <HAL_InitTick+0xa0>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	4a1e      	ldr	r2, [pc, #120]	; (8000560 <HAL_InitTick+0xa0>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	61d3      	str	r3, [r2, #28]
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <HAL_InitTick+0xa0>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004f8:	f107 0210 	add.w	r2, r7, #16
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f001 f81c 	bl	8001540 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000508:	f000 fff2 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 800050c:	4603      	mov	r3, r0
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <HAL_InitTick+0xa4>)
 8000516:	fba2 2303 	umull	r2, r3, r2, r3
 800051a:	0c9b      	lsrs	r3, r3, #18
 800051c:	3b01      	subs	r3, #1
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <HAL_InitTick+0xa8>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <HAL_InitTick+0xac>)
 8000524:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <HAL_InitTick+0xa8>)
 8000528:	f240 32e7 	movw	r2, #999	; 0x3e7
 800052c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_InitTick+0xa8>)
 8000530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000532:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_InitTick+0xa8>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_InitTick+0xa8>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <HAL_InitTick+0xa8>)
 8000542:	f001 f84b 	bl	80015dc <HAL_TIM_Base_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d104      	bne.n	8000556 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800054c:	4806      	ldr	r0, [pc, #24]	; (8000568 <HAL_InitTick+0xa8>)
 800054e:	f001 f89d 	bl	800168c <HAL_TIM_Base_Start_IT>
 8000552:	4603      	mov	r3, r0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3730      	adds	r7, #48	; 0x30
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	431bde83 	.word	0x431bde83
 8000568:	20001e48 	.word	0x20001e48
 800056c:	40000800 	.word	0x40000800

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <HardFault_Handler+0x4>

08000582 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <MemManage_Handler+0x4>

08000588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <BusFault_Handler+0x4>

0800058e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <UsageFault_Handler+0x4>

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <TIM4_IRQHandler+0x10>)
 80005a6:	f001 f8c3 	bl	8001730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20001e48 	.word	0x20001e48

080005b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <USART1_IRQHandler+0x10>)
 80005ba:	f001 fb8d 	bl	8001cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20001e90 	.word	0x20001e90

080005c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_USART1_UART_Init+0x50>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 800060c:	f001 fa30 	bl	8001a70 <HAL_UART_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000616:	f7ff ff1b 	bl	8000450 <Error_Handler>
  }

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20001e90 	.word	0x20001e90
 8000624:	40013800 	.word	0x40013800

08000628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <HAL_UART_MspInit+0x9c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d139      	bne.n	80006bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <HAL_UART_MspInit+0xa0>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <HAL_UART_MspInit+0xa0>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <HAL_UART_MspInit+0xa0>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <HAL_UART_MspInit+0xa0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <HAL_UART_MspInit+0xa0>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_UART_MspInit+0xa0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800067c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <HAL_UART_MspInit+0xa4>)
 800068e:	f000 f9cd 	bl	8000a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <HAL_UART_MspInit+0xa4>)
 80006a8:	f000 f9c0 	bl	8000a2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2106      	movs	r1, #6
 80006b0:	2025      	movs	r0, #37	; 0x25
 80006b2:	f000 f91a 	bl	80008ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006b6:	2025      	movs	r0, #37	; 0x25
 80006b8:	f000 f933 	bl	8000922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40013800 	.word	0x40013800
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006d2:	e003      	b.n	80006dc <LoopCopyDataInit>

080006d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006da:	3104      	adds	r1, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006e4:	d3f6      	bcc.n	80006d4 <CopyDataInit>
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006e8:	e002      	b.n	80006f0 <LoopFillZerobss>

080006ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006ec:	f842 3b04 	str.w	r3, [r2], #4

080006f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006f4:	d3f9      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f6:	f7ff ff67 	bl	80005c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fa:	f004 fb5f 	bl	8004dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fe3f 	bl	8000380 <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r3, =_sidata
 8000704:	08004f0c 	.word	0x08004f0c
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800070c:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000710:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000714:	20001f14 	.word	0x20001f14

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f8d1 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff fec4 	bl	80004c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fe90 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x20>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	4a03      	ldr	r2, [pc, #12]	; (8000768 <HAL_IncTick+0x20>)
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	2000000c 	.word	0x2000000c
 8000768:	20001ed0 	.word	0x20001ed0

0800076c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20001ed0 	.word	0x20001ed0

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db0b      	blt.n	800080e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f003 021f 	and.w	r2, r3, #31
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <__NVIC_EnableIRQ+0x34>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	2001      	movs	r0, #1
 8000806:	fa00 f202 	lsl.w	r2, r0, r2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	; (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	; (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff4f 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff64 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ffb2 	bl	8000870 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff81 	bl	800081c <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff57 	bl	80007e4 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000952:	2b02      	cmp	r3, #2
 8000954:	d005      	beq.n	8000962 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2204      	movs	r2, #4
 800095a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
 8000960:	e051      	b.n	8000a06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f022 020e 	bic.w	r2, r2, #14
 8000970:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 0201 	bic.w	r2, r2, #1
 8000980:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <HAL_DMA_Abort_IT+0xd0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d029      	beq.n	80009e0 <HAL_DMA_Abort_IT+0xa0>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a20      	ldr	r2, [pc, #128]	; (8000a14 <HAL_DMA_Abort_IT+0xd4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d022      	beq.n	80009dc <HAL_DMA_Abort_IT+0x9c>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <HAL_DMA_Abort_IT+0xd8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d01a      	beq.n	80009d6 <HAL_DMA_Abort_IT+0x96>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <HAL_DMA_Abort_IT+0xdc>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d012      	beq.n	80009d0 <HAL_DMA_Abort_IT+0x90>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <HAL_DMA_Abort_IT+0xe0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d00a      	beq.n	80009ca <HAL_DMA_Abort_IT+0x8a>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <HAL_DMA_Abort_IT+0xe4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d102      	bne.n	80009c4 <HAL_DMA_Abort_IT+0x84>
 80009be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009c2:	e00e      	b.n	80009e2 <HAL_DMA_Abort_IT+0xa2>
 80009c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009c8:	e00b      	b.n	80009e2 <HAL_DMA_Abort_IT+0xa2>
 80009ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ce:	e008      	b.n	80009e2 <HAL_DMA_Abort_IT+0xa2>
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	e005      	b.n	80009e2 <HAL_DMA_Abort_IT+0xa2>
 80009d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009da:	e002      	b.n	80009e2 <HAL_DMA_Abort_IT+0xa2>
 80009dc:	2310      	movs	r3, #16
 80009de:	e000      	b.n	80009e2 <HAL_DMA_Abort_IT+0xa2>
 80009e0:	2301      	movs	r3, #1
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <HAL_DMA_Abort_IT+0xe8>)
 80009e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	4798      	blx	r3
    } 
  }
  return status;
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40020008 	.word	0x40020008
 8000a14:	4002001c 	.word	0x4002001c
 8000a18:	40020030 	.word	0x40020030
 8000a1c:	40020044 	.word	0x40020044
 8000a20:	40020058 	.word	0x40020058
 8000a24:	4002006c 	.word	0x4002006c
 8000a28:	40020000 	.word	0x40020000

08000a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b08b      	sub	sp, #44	; 0x2c
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3e:	e127      	b.n	8000c90 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a40:	2201      	movs	r2, #1
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	4013      	ands	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	f040 8116 	bne.w	8000c8a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b12      	cmp	r3, #18
 8000a64:	d034      	beq.n	8000ad0 <HAL_GPIO_Init+0xa4>
 8000a66:	2b12      	cmp	r3, #18
 8000a68:	d80d      	bhi.n	8000a86 <HAL_GPIO_Init+0x5a>
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d02b      	beq.n	8000ac6 <HAL_GPIO_Init+0x9a>
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d804      	bhi.n	8000a7c <HAL_GPIO_Init+0x50>
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d031      	beq.n	8000ada <HAL_GPIO_Init+0xae>
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d01c      	beq.n	8000ab4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a7a:	e048      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a7c:	2b03      	cmp	r3, #3
 8000a7e:	d043      	beq.n	8000b08 <HAL_GPIO_Init+0xdc>
 8000a80:	2b11      	cmp	r3, #17
 8000a82:	d01b      	beq.n	8000abc <HAL_GPIO_Init+0x90>
          break;
 8000a84:	e043      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a86:	4a89      	ldr	r2, [pc, #548]	; (8000cac <HAL_GPIO_Init+0x280>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d026      	beq.n	8000ada <HAL_GPIO_Init+0xae>
 8000a8c:	4a87      	ldr	r2, [pc, #540]	; (8000cac <HAL_GPIO_Init+0x280>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d806      	bhi.n	8000aa0 <HAL_GPIO_Init+0x74>
 8000a92:	4a87      	ldr	r2, [pc, #540]	; (8000cb0 <HAL_GPIO_Init+0x284>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d020      	beq.n	8000ada <HAL_GPIO_Init+0xae>
 8000a98:	4a86      	ldr	r2, [pc, #536]	; (8000cb4 <HAL_GPIO_Init+0x288>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d01d      	beq.n	8000ada <HAL_GPIO_Init+0xae>
          break;
 8000a9e:	e036      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aa0:	4a85      	ldr	r2, [pc, #532]	; (8000cb8 <HAL_GPIO_Init+0x28c>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d019      	beq.n	8000ada <HAL_GPIO_Init+0xae>
 8000aa6:	4a85      	ldr	r2, [pc, #532]	; (8000cbc <HAL_GPIO_Init+0x290>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d016      	beq.n	8000ada <HAL_GPIO_Init+0xae>
 8000aac:	4a84      	ldr	r2, [pc, #528]	; (8000cc0 <HAL_GPIO_Init+0x294>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0xae>
          break;
 8000ab2:	e02c      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e028      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e023      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	3308      	adds	r3, #8
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e01e      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	330c      	adds	r3, #12
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e019      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e012      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d105      	bne.n	8000afc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af0:	2308      	movs	r3, #8
 8000af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	611a      	str	r2, [r3, #16]
          break;
 8000afa:	e008      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	615a      	str	r2, [r3, #20]
          break;
 8000b06:	e002      	b.n	8000b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	2bff      	cmp	r3, #255	; 0xff
 8000b12:	d801      	bhi.n	8000b18 <HAL_GPIO_Init+0xec>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	e001      	b.n	8000b1c <HAL_GPIO_Init+0xf0>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	2bff      	cmp	r3, #255	; 0xff
 8000b22:	d802      	bhi.n	8000b2a <HAL_GPIO_Init+0xfe>
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_Init+0x104>
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3b08      	subs	r3, #8
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	210f      	movs	r1, #15
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	401a      	ands	r2, r3
 8000b42:	6a39      	ldr	r1, [r7, #32]
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 8096 	beq.w	8000c8a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b59      	ldr	r3, [pc, #356]	; (8000cc4 <HAL_GPIO_Init+0x298>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a58      	ldr	r2, [pc, #352]	; (8000cc4 <HAL_GPIO_Init+0x298>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b56      	ldr	r3, [pc, #344]	; (8000cc4 <HAL_GPIO_Init+0x298>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b76:	4a54      	ldr	r2, [pc, #336]	; (8000cc8 <HAL_GPIO_Init+0x29c>)
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b82:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	220f      	movs	r2, #15
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	4013      	ands	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ccc <HAL_GPIO_Init+0x2a0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d013      	beq.n	8000bca <HAL_GPIO_Init+0x19e>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a4a      	ldr	r2, [pc, #296]	; (8000cd0 <HAL_GPIO_Init+0x2a4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d00d      	beq.n	8000bc6 <HAL_GPIO_Init+0x19a>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <HAL_GPIO_Init+0x2a8>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d007      	beq.n	8000bc2 <HAL_GPIO_Init+0x196>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <HAL_GPIO_Init+0x2ac>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <HAL_GPIO_Init+0x192>
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x1a0>
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	e004      	b.n	8000bcc <HAL_GPIO_Init+0x1a0>
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	e002      	b.n	8000bcc <HAL_GPIO_Init+0x1a0>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <HAL_GPIO_Init+0x1a0>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bce:	f002 0203 	and.w	r2, r2, #3
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	4093      	lsls	r3, r2
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bdc:	493a      	ldr	r1, [pc, #232]	; (8000cc8 <HAL_GPIO_Init+0x29c>)
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	3302      	adds	r3, #2
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d006      	beq.n	8000c04 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf6:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4938      	ldr	r1, [pc, #224]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	600b      	str	r3, [r1, #0]
 8000c02:	e006      	b.n	8000c12 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	4933      	ldr	r1, [pc, #204]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c0e:	4013      	ands	r3, r2
 8000c10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	492e      	ldr	r1, [pc, #184]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	604b      	str	r3, [r1, #4]
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4929      	ldr	r1, [pc, #164]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c46:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	4924      	ldr	r1, [pc, #144]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	608b      	str	r3, [r1, #8]
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	491f      	ldr	r1, [pc, #124]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d006      	beq.n	8000c7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	491a      	ldr	r1, [pc, #104]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	60cb      	str	r3, [r1, #12]
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <HAL_GPIO_Init+0x2b0>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f47f aed0 	bne.w	8000a40 <HAL_GPIO_Init+0x14>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	372c      	adds	r7, #44	; 0x2c
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	10110000 	.word	0x10110000
 8000cb4:	10120000 	.word	0x10120000
 8000cb8:	10310000 	.word	0x10310000
 8000cbc:	10320000 	.word	0x10320000
 8000cc0:	10220000 	.word	0x10220000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40011400 	.word	0x40011400
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
 8000cec:	4613      	mov	r3, r2
 8000cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf0:	787b      	ldrb	r3, [r7, #1]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cfc:	e003      	b.n	8000d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	041a      	lsls	r2, r3, #16
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	611a      	str	r2, [r3, #16]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4013      	ands	r3, r2
 8000d28:	041a      	lsls	r2, r3, #16
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43d9      	mvns	r1, r3
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	400b      	ands	r3, r1
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	611a      	str	r2, [r3, #16]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
	...

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e26c      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8087 	beq.w	8000e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d64:	4b92      	ldr	r3, [pc, #584]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d00c      	beq.n	8000d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d70:	4b8f      	ldr	r3, [pc, #572]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d112      	bne.n	8000da2 <HAL_RCC_OscConfig+0x5e>
 8000d7c:	4b8c      	ldr	r3, [pc, #560]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d88:	d10b      	bne.n	8000da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8a:	4b89      	ldr	r3, [pc, #548]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d06c      	beq.n	8000e70 <HAL_RCC_OscConfig+0x12c>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d168      	bne.n	8000e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e246      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000daa:	d106      	bne.n	8000dba <HAL_RCC_OscConfig+0x76>
 8000dac:	4b80      	ldr	r3, [pc, #512]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a7f      	ldr	r2, [pc, #508]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e02e      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x98>
 8000dc2:	4b7b      	ldr	r3, [pc, #492]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a7a      	ldr	r2, [pc, #488]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b78      	ldr	r3, [pc, #480]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a77      	ldr	r2, [pc, #476]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e01d      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0xbc>
 8000de6:	4b72      	ldr	r3, [pc, #456]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a71      	ldr	r2, [pc, #452]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a6e      	ldr	r2, [pc, #440]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e00b      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000e00:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a6a      	ldr	r2, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b68      	ldr	r3, [pc, #416]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a67      	ldr	r2, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d013      	beq.n	8000e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fca4 	bl	800076c <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e28:	f7ff fca0 	bl	800076c <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b64      	cmp	r3, #100	; 0x64
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e1fa      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0xe4>
 8000e46:	e014      	b.n	8000e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fc90 	bl	800076c <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fc8c 	bl	800076c <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b64      	cmp	r3, #100	; 0x64
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e1e6      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f0      	bne.n	8000e50 <HAL_RCC_OscConfig+0x10c>
 8000e6e:	e000      	b.n	8000e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d063      	beq.n	8000f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e8a:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d11c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
 8000e96:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d116      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_RCC_OscConfig+0x176>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d001      	beq.n	8000eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e1ba      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4939      	ldr	r1, [pc, #228]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ece:	e03a      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d020      	beq.n	8000f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <HAL_RCC_OscConfig+0x270>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fc45 	bl	800076c <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fc41 	bl	800076c <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e19b      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4927      	ldr	r1, [pc, #156]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
 8000f18:	e015      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc24 	bl	800076c <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f28:	f7ff fc20 	bl	800076c <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e17a      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d03a      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d019      	beq.n	8000f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fc04 	bl	800076c <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f68:	f7ff fc00 	bl	800076c <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e15a      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fb0a 	bl	80015a0 <RCC_Delay>
 8000f8c:	e01c      	b.n	8000fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_RCC_OscConfig+0x274>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f94:	f7ff fbea 	bl	800076c <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9a:	e00f      	b.n	8000fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fbe6 	bl	800076c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d908      	bls.n	8000fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e140      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	42420000 	.word	0x42420000
 8000fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbc:	4b9e      	ldr	r3, [pc, #632]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e9      	bne.n	8000f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 80a6 	beq.w	8001122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fda:	4b97      	ldr	r3, [pc, #604]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b94      	ldr	r3, [pc, #592]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a93      	ldr	r2, [pc, #588]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b91      	ldr	r3, [pc, #580]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ffe:	2301      	movs	r3, #1
 8001000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001002:	4b8e      	ldr	r3, [pc, #568]	; (800123c <HAL_RCC_OscConfig+0x4f8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100e:	4b8b      	ldr	r3, [pc, #556]	; (800123c <HAL_RCC_OscConfig+0x4f8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a8a      	ldr	r2, [pc, #552]	; (800123c <HAL_RCC_OscConfig+0x4f8>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800101a:	f7ff fba7 	bl	800076c <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001022:	f7ff fba3 	bl	800076c <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e0fd      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	4b81      	ldr	r3, [pc, #516]	; (800123c <HAL_RCC_OscConfig+0x4f8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x312>
 8001048:	4b7b      	ldr	r3, [pc, #492]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a7a      	ldr	r2, [pc, #488]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6213      	str	r3, [r2, #32]
 8001054:	e02d      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x334>
 800105e:	4b76      	ldr	r3, [pc, #472]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a75      	ldr	r2, [pc, #468]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	4b73      	ldr	r3, [pc, #460]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a72      	ldr	r2, [pc, #456]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	e01c      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d10c      	bne.n	800109a <HAL_RCC_OscConfig+0x356>
 8001080:	4b6d      	ldr	r3, [pc, #436]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4a6c      	ldr	r2, [pc, #432]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6213      	str	r3, [r2, #32]
 800108c:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a69      	ldr	r2, [pc, #420]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	e00b      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 800109a:	4b67      	ldr	r3, [pc, #412]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a66      	ldr	r2, [pc, #408]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	4b64      	ldr	r3, [pc, #400]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a63      	ldr	r2, [pc, #396]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d015      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb57 	bl	800076c <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fb53 	bl	800076c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e0ab      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d8:	4b57      	ldr	r3, [pc, #348]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0ee      	beq.n	80010c2 <HAL_RCC_OscConfig+0x37e>
 80010e4:	e014      	b.n	8001110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fb41 	bl	800076c <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fb3d 	bl	800076c <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e095      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001104:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ee      	bne.n	80010ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d105      	bne.n	8001122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001116:	4b48      	ldr	r3, [pc, #288]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a47      	ldr	r2, [pc, #284]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800111c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8081 	beq.w	800122e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b08      	cmp	r3, #8
 8001136:	d061      	beq.n	80011fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d146      	bne.n	80011ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_RCC_OscConfig+0x4fc>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fb11 	bl	800076c <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fb0d 	bl	800076c <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e067      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f0      	bne.n	800114e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001174:	d108      	bne.n	8001188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	492d      	ldr	r1, [pc, #180]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a19      	ldr	r1, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	430b      	orrs	r3, r1
 800119a:	4927      	ldr	r1, [pc, #156]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_RCC_OscConfig+0x4fc>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fae1 	bl	800076c <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ae:	f7ff fadd 	bl	800076c <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e037      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x46a>
 80011cc:	e02f      	b.n	800122e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_RCC_OscConfig+0x4fc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff faca 	bl	800076c <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011dc:	f7ff fac6 	bl	800076c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e020      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x498>
 80011fa:	e018      	b.n	800122e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e013      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_RCC_OscConfig+0x4f4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	429a      	cmp	r2, r3
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001226:	429a      	cmp	r2, r3
 8001228:	d001      	beq.n	800122e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	40007000 	.word	0x40007000
 8001240:	42420060 	.word	0x42420060

08001244 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0d0      	b.n	80013fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001258:	4b6a      	ldr	r3, [pc, #424]	; (8001404 <HAL_RCC_ClockConfig+0x1c0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d910      	bls.n	8001288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b67      	ldr	r3, [pc, #412]	; (8001404 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 0207 	bic.w	r2, r3, #7
 800126e:	4965      	ldr	r1, [pc, #404]	; (8001404 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b63      	ldr	r3, [pc, #396]	; (8001404 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0b8      	b.n	80013fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a58      	ldr	r2, [pc, #352]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b8:	4b53      	ldr	r3, [pc, #332]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c4:	4b50      	ldr	r3, [pc, #320]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	494d      	ldr	r1, [pc, #308]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d040      	beq.n	8001364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d115      	bne.n	8001322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e07f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d107      	bne.n	8001312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001302:	4b41      	ldr	r3, [pc, #260]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e073      	b.n	80013fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e06b      	b.n	80013fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001322:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f023 0203 	bic.w	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4936      	ldr	r1, [pc, #216]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001334:	f7ff fa1a 	bl	800076c <HAL_GetTick>
 8001338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133a:	e00a      	b.n	8001352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800133c:	f7ff fa16 	bl	800076c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e053      	b.n	80013fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 020c 	and.w	r2, r3, #12
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	429a      	cmp	r2, r3
 8001362:	d1eb      	bne.n	800133c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <HAL_RCC_ClockConfig+0x1c0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d210      	bcs.n	8001394 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 0207 	bic.w	r2, r3, #7
 800137a:	4922      	ldr	r1, [pc, #136]	; (8001404 <HAL_RCC_ClockConfig+0x1c0>)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e032      	b.n	80013fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	4916      	ldr	r1, [pc, #88]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013d2:	f000 f821 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 80013d6:	4601      	mov	r1, r0
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_RCC_ClockConfig+0x1c8>)
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	fa21 f303 	lsr.w	r3, r1, r3
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <HAL_RCC_ClockConfig+0x1cc>)
 80013ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_ClockConfig+0x1d0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f864 	bl	80004c0 <HAL_InitTick>

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40022000 	.word	0x40022000
 8001408:	40021000 	.word	0x40021000
 800140c:	08004eec 	.word	0x08004eec
 8001410:	20000004 	.word	0x20000004
 8001414:	20000008 	.word	0x20000008

08001418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001418:	b490      	push	{r4, r7}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001420:	1d3c      	adds	r4, r7, #4
 8001422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b04      	cmp	r3, #4
 8001450:	d002      	beq.n	8001458 <HAL_RCC_GetSysClockFreq+0x40>
 8001452:	2b08      	cmp	r3, #8
 8001454:	d003      	beq.n	800145e <HAL_RCC_GetSysClockFreq+0x46>
 8001456:	e02d      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800145a:	623b      	str	r3, [r7, #32]
      break;
 800145c:	e02d      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800146a:	4413      	add	r3, r2
 800146c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001470:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	0c5b      	lsrs	r3, r3, #17
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800148a:	4413      	add	r3, r2
 800148c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001490:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001496:	fb02 f203 	mul.w	r2, r2, r3
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
 80014a2:	e004      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	623b      	str	r3, [r7, #32]
      break;
 80014b2:	e002      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014b6:	623b      	str	r3, [r7, #32]
      break;
 80014b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ba:	6a3b      	ldr	r3, [r7, #32]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc90      	pop	{r4, r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	08004e78 	.word	0x08004e78
 80014cc:	08004e88 	.word	0x08004e88
 80014d0:	40021000 	.word	0x40021000
 80014d4:	007a1200 	.word	0x007a1200
 80014d8:	003d0900 	.word	0x003d0900

080014dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <HAL_RCC_GetHCLKFreq+0x10>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000004 	.word	0x20000004

080014f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f4:	f7ff fff2 	bl	80014dc <HAL_RCC_GetHCLKFreq>
 80014f8:	4601      	mov	r1, r0
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800150c:	4618      	mov	r0, r3
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	08004efc 	.word	0x08004efc

08001518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800151c:	f7ff ffde 	bl	80014dc <HAL_RCC_GetHCLKFreq>
 8001520:	4601      	mov	r1, r0
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	0adb      	lsrs	r3, r3, #11
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_RCC_GetPCLK2Freq+0x24>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	08004efc 	.word	0x08004efc

08001540 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	220f      	movs	r2, #15
 800154e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_RCC_GetClockConfig+0x58>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_RCC_GetClockConfig+0x58>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_GetClockConfig+0x58>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_RCC_GetClockConfig+0x58>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_RCC_GetClockConfig+0x5c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0207 	and.w	r2, r3, #7
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40021000 	.word	0x40021000
 800159c:	40022000 	.word	0x40022000

080015a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <RCC_Delay+0x34>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <RCC_Delay+0x38>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0a5b      	lsrs	r3, r3, #9
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015bc:	bf00      	nop
  }
  while (Delay --);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	60fa      	str	r2, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f9      	bne.n	80015bc <RCC_Delay+0x1c>
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000004 	.word	0x20000004
 80015d8:	10624dd3 	.word	0x10624dd3

080015dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e041      	b.n	8001672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d106      	bne.n	8001608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f839 	bl	800167a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3304      	adds	r3, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f000 f9b4 	bl	8001988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d001      	beq.n	80016a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e03a      	b.n	800171a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a18      	ldr	r2, [pc, #96]	; (8001724 <HAL_TIM_Base_Start_IT+0x98>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00e      	beq.n	80016e4 <HAL_TIM_Base_Start_IT+0x58>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ce:	d009      	beq.n	80016e4 <HAL_TIM_Base_Start_IT+0x58>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_TIM_Base_Start_IT+0x9c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d004      	beq.n	80016e4 <HAL_TIM_Base_Start_IT+0x58>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <HAL_TIM_Base_Start_IT+0xa0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d111      	bne.n	8001708 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d010      	beq.n	8001718 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001706:	e007      	b.n	8001718 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40012c00 	.word	0x40012c00
 8001728:	40000400 	.word	0x40000400
 800172c:	40000800 	.word	0x40000800

08001730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b02      	cmp	r3, #2
 8001744:	d122      	bne.n	800178c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b02      	cmp	r3, #2
 8001752:	d11b      	bne.n	800178c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0202 	mvn.w	r2, #2
 800175c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f8ed 	bl	8001952 <HAL_TIM_IC_CaptureCallback>
 8001778:	e005      	b.n	8001786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8e0 	bl	8001940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f8ef 	bl	8001964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b04      	cmp	r3, #4
 8001798:	d122      	bne.n	80017e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d11b      	bne.n	80017e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f06f 0204 	mvn.w	r2, #4
 80017b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f8c3 	bl	8001952 <HAL_TIM_IC_CaptureCallback>
 80017cc:	e005      	b.n	80017da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f8b6 	bl	8001940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f8c5 	bl	8001964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d122      	bne.n	8001834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d11b      	bne.n	8001834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0208 	mvn.w	r2, #8
 8001804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2204      	movs	r2, #4
 800180a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f899 	bl	8001952 <HAL_TIM_IC_CaptureCallback>
 8001820:	e005      	b.n	800182e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f88c 	bl	8001940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f89b 	bl	8001964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b10      	cmp	r3, #16
 8001840:	d122      	bne.n	8001888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b10      	cmp	r3, #16
 800184e:	d11b      	bne.n	8001888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0210 	mvn.w	r2, #16
 8001858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2208      	movs	r2, #8
 800185e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f86f 	bl	8001952 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f862 	bl	8001940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f871 	bl	8001964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d10e      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d107      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0201 	mvn.w	r2, #1
 80018ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7fe fdbc 	bl	800042c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018be:	2b80      	cmp	r3, #128	; 0x80
 80018c0:	d10e      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	2b80      	cmp	r3, #128	; 0x80
 80018ce:	d107      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f8bf 	bl	8001a5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ea:	2b40      	cmp	r3, #64	; 0x40
 80018ec:	d10e      	bne.n	800190c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f8:	2b40      	cmp	r3, #64	; 0x40
 80018fa:	d107      	bne.n	800190c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f835 	bl	8001976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b20      	cmp	r3, #32
 8001918:	d10e      	bne.n	8001938 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b20      	cmp	r3, #32
 8001926:	d107      	bne.n	8001938 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f06f 0220 	mvn.w	r2, #32
 8001930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f88a 	bl	8001a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a29      	ldr	r2, [pc, #164]	; (8001a40 <TIM_Base_SetConfig+0xb8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00b      	beq.n	80019b8 <TIM_Base_SetConfig+0x30>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a6:	d007      	beq.n	80019b8 <TIM_Base_SetConfig+0x30>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <TIM_Base_SetConfig+0xbc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d003      	beq.n	80019b8 <TIM_Base_SetConfig+0x30>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <TIM_Base_SetConfig+0xc0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d108      	bne.n	80019ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <TIM_Base_SetConfig+0xb8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00b      	beq.n	80019ea <TIM_Base_SetConfig+0x62>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d8:	d007      	beq.n	80019ea <TIM_Base_SetConfig+0x62>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <TIM_Base_SetConfig+0xbc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d003      	beq.n	80019ea <TIM_Base_SetConfig+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <TIM_Base_SetConfig+0xc0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d108      	bne.n	80019fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <TIM_Base_SetConfig+0xb8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d103      	bne.n	8001a30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	615a      	str	r2, [r3, #20]
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40000800 	.word	0x40000800

08001a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e03f      	b.n	8001b02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7fe fdc6 	bl	8000628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2224      	movs	r2, #36	; 0x24
 8001aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fb83 	bl	80021c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b08a      	sub	sp, #40	; 0x28
 8001b0e:	af02      	add	r7, sp, #8
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d17c      	bne.n	8001c24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_UART_Transmit+0x2c>
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e075      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_UART_Transmit+0x3e>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e06e      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2221      	movs	r2, #33	; 0x21
 8001b5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b5e:	f7fe fe05 	bl	800076c <HAL_GetTick>
 8001b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	88fa      	ldrh	r2, [r7, #6]
 8001b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b78:	d108      	bne.n	8001b8c <HAL_UART_Transmit+0x82>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d104      	bne.n	8001b8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	e003      	b.n	8001b94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001b9c:	e02a      	b.n	8001bf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f9a7 	bl	8001efc <UART_WaitOnFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e036      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10b      	bne.n	8001bd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e007      	b.n	8001be6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	3301      	adds	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1cf      	bne.n	8001b9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2140      	movs	r1, #64	; 0x40
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f977 	bl	8001efc <UART_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e006      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d140      	bne.n	8001cca <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_UART_Receive_IT+0x26>
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e039      	b.n	8001ccc <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_UART_Receive_IT+0x38>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e032      	b.n	8001ccc <HAL_UART_Receive_IT+0x9e>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	88fa      	ldrh	r2, [r7, #6]
 8001c7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2222      	movs	r2, #34	; 0x22
 8001c8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_UART_IRQHandler+0x52>
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f9cc 	bl	80020c0 <UART_Receive_IT>
      return;
 8001d28:	e0d1      	b.n	8001ece <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80b0 	beq.w	8001e92 <HAL_UART_IRQHandler+0x1ba>
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <HAL_UART_IRQHandler+0x70>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80a5 	beq.w	8001e92 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <HAL_UART_IRQHandler+0x90>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HAL_UART_IRQHandler+0xb0>
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	f043 0202 	orr.w	r2, r3, #2
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <HAL_UART_IRQHandler+0xd0>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	f043 0204 	orr.w	r2, r3, #4
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00f      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xfa>
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d104      	bne.n	8001dc6 <HAL_UART_IRQHandler+0xee>
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dca:	f043 0208 	orr.w	r2, r3, #8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d078      	beq.n	8001ecc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_UART_IRQHandler+0x11c>
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f966 	bl	80020c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_UART_IRQHandler+0x144>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d031      	beq.n	8001e80 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f8b7 	bl	8001f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e3e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4c:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_UART_IRQHandler+0x1fc>)
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fd73 	bl	8000940 <HAL_DMA_Abort_IT>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d016      	beq.n	8001e8e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e6e:	e00e      	b.n	8001e8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f83a 	bl	8001eea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e76:	e00a      	b.n	8001e8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f836 	bl	8001eea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e7e:	e006      	b.n	8001e8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f832 	bl	8001eea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001e8c:	e01e      	b.n	8001ecc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e8e:	bf00      	nop
    return;
 8001e90:	e01c      	b.n	8001ecc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_UART_IRQHandler+0x1d6>
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8a3 	bl	8001ff2 <UART_Transmit_IT>
    return;
 8001eac:	e00f      	b.n	8001ece <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_UART_IRQHandler+0x1f6>
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8e4 	bl	8002090 <UART_EndTransmit_IT>
    return;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <HAL_UART_IRQHandler+0x1f6>
    return;
 8001ecc:	bf00      	nop
  }
}
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	08001fcb 	.word	0x08001fcb

08001ed8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f0c:	e02c      	b.n	8001f68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d028      	beq.n	8001f68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8001f1c:	f7fe fc26 	bl	800076c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d21d      	bcs.n	8001f68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e00f      	b.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4013      	ands	r3, r2
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d0c3      	beq.n	8001f0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001fa6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff ff80 	bl	8001eea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b21      	cmp	r3, #33	; 0x21
 8002004:	d13e      	bne.n	8002084 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800200e:	d114      	bne.n	800203a <UART_Transmit_IT+0x48>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d110      	bne.n	800203a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800202c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	1c9a      	adds	r2, r3, #2
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	621a      	str	r2, [r3, #32]
 8002038:	e008      	b.n	800204c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	1c59      	adds	r1, r3, #1
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6211      	str	r1, [r2, #32]
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29b      	uxth	r3, r3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4619      	mov	r1, r3
 800205a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10f      	bne.n	8002080 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800207e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	e000      	b.n	8002086 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002084:	2302      	movs	r3, #2
  }
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff11 	bl	8001ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b22      	cmp	r3, #34	; 0x22
 80020d2:	d170      	bne.n	80021b6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020dc:	d117      	bne.n	800210e <UART_Receive_IT+0x4e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	1c9a      	adds	r2, r3, #2
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
 800210c:	e026      	b.n	800215c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002120:	d007      	beq.n	8002132 <UART_Receive_IT+0x72>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <UART_Receive_IT+0x80>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e008      	b.n	8002152 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29b      	uxth	r3, r3
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4619      	mov	r1, r3
 800216a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800216c:	2b00      	cmp	r3, #0
 800216e:	d120      	bne.n	80021b2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0220 	bic.w	r2, r2, #32
 800217e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800218e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe f887 	bl	80002bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e002      	b.n	80021b8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
  }
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021fa:	f023 030c 	bic.w	r3, r3, #12
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	430b      	orrs	r3, r1
 8002206:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <UART_SetConfig+0x114>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d103      	bne.n	8002230 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002228:	f7ff f976 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	e002      	b.n	8002236 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002230:	f7ff f95e 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8002234:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	009a      	lsls	r2, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <UART_SetConfig+0x118>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	0119      	lsls	r1, r3, #4
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	009a      	lsls	r2, r3, #2
 8002260:	441a      	add	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fbb2 f2f3 	udiv	r2, r2, r3
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <UART_SetConfig+0x118>)
 800226e:	fba3 0302 	umull	r0, r3, r3, r2
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2064      	movs	r0, #100	; 0x64
 8002276:	fb00 f303 	mul.w	r3, r0, r3
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	3332      	adds	r3, #50	; 0x32
 8002280:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <UART_SetConfig+0x118>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228c:	4419      	add	r1, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	009a      	lsls	r2, r3, #2
 8002298:	441a      	add	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <UART_SetConfig+0x118>)
 80022a6:	fba3 0302 	umull	r0, r3, r3, r2
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2064      	movs	r0, #100	; 0x64
 80022ae:	fb00 f303 	mul.w	r3, r0, r3
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	3332      	adds	r3, #50	; 0x32
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <UART_SetConfig+0x118>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	f003 020f 	and.w	r2, r3, #15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	440a      	add	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40013800 	.word	0x40013800
 80022d8:	51eb851f 	.word	0x51eb851f

080022dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022e2:	f3ef 8305 	mrs	r3, IPSR
 80022e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80022e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10f      	bne.n	800230e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ee:	f3ef 8310 	mrs	r3, PRIMASK
 80022f2:	607b      	str	r3, [r7, #4]
  return(result);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <osKernelInitialize+0x32>
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <osKernelInitialize+0x60>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d109      	bne.n	8002316 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002302:	f3ef 8311 	mrs	r3, BASEPRI
 8002306:	603b      	str	r3, [r7, #0]
  return(result);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800230e:	f06f 0305 	mvn.w	r3, #5
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	e00c      	b.n	8002330 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <osKernelInitialize+0x60>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <osKernelInitialize+0x60>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e002      	b.n	8002330 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000030 	.word	0x20000030

08002340 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002346:	f3ef 8305 	mrs	r3, IPSR
 800234a:	60bb      	str	r3, [r7, #8]
  return(result);
 800234c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002352:	f3ef 8310 	mrs	r3, PRIMASK
 8002356:	607b      	str	r3, [r7, #4]
  return(result);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <osKernelStart+0x32>
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <osKernelStart+0x64>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d109      	bne.n	800237a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002366:	f3ef 8311 	mrs	r3, BASEPRI
 800236a:	603b      	str	r3, [r7, #0]
  return(result);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002372:	f06f 0305 	mvn.w	r3, #5
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e00e      	b.n	8002398 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <osKernelStart+0x64>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d107      	bne.n	8002392 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <osKernelStart+0x64>)
 8002384:	2202      	movs	r2, #2
 8002386:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002388:	f001 f864 	bl	8003454 <vTaskStartScheduler>
      stat = osOK;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e002      	b.n	8002398 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002398:	68fb      	ldr	r3, [r7, #12]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000030 	.word	0x20000030

080023a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b092      	sub	sp, #72	; 0x48
 80023ac:	af04      	add	r7, sp, #16
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023b8:	f3ef 8305 	mrs	r3, IPSR
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 8094 	bne.w	80024ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ca:	623b      	str	r3, [r7, #32]
  return(result);
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 808d 	bne.w	80024ee <osThreadNew+0x146>
 80023d4:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <osThreadNew+0x150>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d106      	bne.n	80023ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023dc:	f3ef 8311 	mrs	r3, BASEPRI
 80023e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 8082 	bne.w	80024ee <osThreadNew+0x146>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d07e      	beq.n	80024ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80023f4:	2318      	movs	r3, #24
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80023f8:	2300      	movs	r3, #0
 80023fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80023fc:	f107 031b 	add.w	r3, r7, #27
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d045      	beq.n	800249a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <osThreadNew+0x74>
        name = attr->name;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <osThreadNew+0x9a>
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	2b38      	cmp	r3, #56	; 0x38
 8002434:	d805      	bhi.n	8002442 <osThreadNew+0x9a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <osThreadNew+0x9e>
        return (NULL);
 8002442:	2300      	movs	r3, #0
 8002444:	e054      	b.n	80024f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00e      	beq.n	800247c <osThreadNew+0xd4>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b5b      	cmp	r3, #91	; 0x5b
 8002464:	d90a      	bls.n	800247c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <osThreadNew+0xd4>
        mem = 1;
 8002476:	2301      	movs	r3, #1
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
 800247a:	e010      	b.n	800249e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10c      	bne.n	800249e <osThreadNew+0xf6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d108      	bne.n	800249e <osThreadNew+0xf6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d104      	bne.n	800249e <osThreadNew+0xf6>
          mem = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
 8002498:	e001      	b.n	800249e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d110      	bne.n	80024c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024ac:	9202      	str	r2, [sp, #8]
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fe02 	bl	80030c4 <xTaskCreateStatic>
 80024c0:	4603      	mov	r3, r0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e013      	b.n	80024ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d110      	bne.n	80024ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fe49 	bl	8003176 <xTaskCreate>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d001      	beq.n	80024ee <osThreadNew+0x146>
          hTask = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024ee:	697b      	ldr	r3, [r7, #20]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3738      	adds	r7, #56	; 0x38
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000030 	.word	0x20000030

080024fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002504:	f3ef 8305 	mrs	r3, IPSR
 8002508:	613b      	str	r3, [r7, #16]
  return(result);
 800250a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10f      	bne.n	8002530 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002510:	f3ef 8310 	mrs	r3, PRIMASK
 8002514:	60fb      	str	r3, [r7, #12]
  return(result);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <osDelay+0x34>
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <osDelay+0x58>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d109      	bne.n	8002538 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002524:	f3ef 8311 	mrs	r3, BASEPRI
 8002528:	60bb      	str	r3, [r7, #8]
  return(result);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <osDelay+0x3c>
    stat = osErrorISR;
 8002530:	f06f 0305 	mvn.w	r3, #5
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e007      	b.n	8002548 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 ff52 	bl	80033ec <vTaskDelay>
    }
  }

  return (stat);
 8002548:	697b      	ldr	r3, [r7, #20]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000030 	.word	0x20000030

08002558 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a06      	ldr	r2, [pc, #24]	; (8002580 <vApplicationGetIdleTaskMemory+0x28>)
 8002568:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4a05      	ldr	r2, [pc, #20]	; (8002584 <vApplicationGetIdleTaskMemory+0x2c>)
 800256e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	20000034 	.word	0x20000034
 8002584:	20000090 	.word	0x20000090

08002588 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002598:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <vApplicationGetTimerTaskMemory+0x30>)
 800259e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a6:	601a      	str	r2, [r3, #0]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000290 	.word	0x20000290
 80025b8:	200002ec 	.word	0x200002ec

080025bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f103 0208 	add.w	r2, r3, #8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f103 0208 	add.w	r2, r3, #8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f103 0208 	add.w	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d103      	bne.n	8002678 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e00c      	b.n	8002692 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3308      	adds	r3, #8
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e002      	b.n	8002686 <vListInsert+0x2e>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	429a      	cmp	r2, r3
 8002690:	d2f6      	bcs.n	8002680 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6892      	ldr	r2, [r2, #8]
 80026de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6852      	ldr	r2, [r2, #4]
 80026e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d103      	bne.n	80026fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1e5a      	subs	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
	...

0800271c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	e7fe      	b.n	8002742 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002744:	f002 f870 	bl	8004828 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	441a      	add	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	3b01      	subs	r3, #1
 8002776:	68f9      	ldr	r1, [r7, #12]
 8002778:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	441a      	add	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	22ff      	movs	r2, #255	; 0xff
 8002788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	22ff      	movs	r2, #255	; 0xff
 8002790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d114      	bne.n	80027c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01a      	beq.n	80027d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3310      	adds	r3, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 f8d8 	bl	800395c <xTaskRemoveFromEventList>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d012      	beq.n	80027d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <xQueueGenericReset+0xcc>)
 80027b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	e009      	b.n	80027d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3310      	adds	r3, #16
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fef7 	bl	80025bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3324      	adds	r3, #36	; 0x24
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fef2 	bl	80025bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027d8:	f002 f854 	bl	8004884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027dc:	2301      	movs	r3, #1
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	e000ed04 	.word	0xe000ed04

080027ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08e      	sub	sp, #56	; 0x38
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <xQueueGenericCreateStatic+0x28>
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
 8002812:	e7fe      	b.n	8002812 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <xQueueGenericCreateStatic+0x42>
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
 800282c:	e7fe      	b.n	800282c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <xQueueGenericCreateStatic+0x4e>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <xQueueGenericCreateStatic+0x52>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xQueueGenericCreateStatic+0x54>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <xQueueGenericCreateStatic+0x6c>
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	623b      	str	r3, [r7, #32]
 8002856:	e7fe      	b.n	8002856 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <xQueueGenericCreateStatic+0x78>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <xQueueGenericCreateStatic+0x7c>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <xQueueGenericCreateStatic+0x7e>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <xQueueGenericCreateStatic+0x96>
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	e7fe      	b.n	8002880 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002882:	2350      	movs	r3, #80	; 0x50
 8002884:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b50      	cmp	r3, #80	; 0x50
 800288a:	d009      	beq.n	80028a0 <xQueueGenericCreateStatic+0xb4>
 800288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	e7fe      	b.n	800289e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f805 	bl	80028d0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3730      	adds	r7, #48	; 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e002      	b.n	80028f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028fe:	2101      	movs	r1, #1
 8002900:	69b8      	ldr	r0, [r7, #24]
 8002902:	f7ff ff0b 	bl	800271c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08e      	sub	sp, #56	; 0x38
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <xQueueGenericSend+0x30>
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
 8002946:	e7fe      	b.n	8002946 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <xQueueGenericSend+0x3e>
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <xQueueGenericSend+0x42>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <xQueueGenericSend+0x44>
 800295a:	2300      	movs	r3, #0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <xQueueGenericSend+0x5c>
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	e7fe      	b.n	8002972 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d103      	bne.n	8002982 <xQueueGenericSend+0x6a>
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <xQueueGenericSend+0x6e>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <xQueueGenericSend+0x70>
 8002986:	2300      	movs	r3, #0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <xQueueGenericSend+0x88>
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	e7fe      	b.n	800299e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029a0:	f001 f996 	bl	8003cd0 <xTaskGetSchedulerState>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <xQueueGenericSend+0x98>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <xQueueGenericSend+0x9c>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <xQueueGenericSend+0x9e>
 80029b4:	2300      	movs	r3, #0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <xQueueGenericSend+0xb6>
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	e7fe      	b.n	80029cc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029ce:	f001 ff2b 	bl	8004828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <xQueueGenericSend+0xcc>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d129      	bne.n	8002a38 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ea:	f000 f9ff 	bl	8002dec <prvCopyDataToQueue>
 80029ee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d010      	beq.n	8002a1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	3324      	adds	r3, #36	; 0x24
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 ffad 	bl	800395c <xTaskRemoveFromEventList>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a08:	4b3f      	ldr	r3, [pc, #252]	; (8002b08 <xQueueGenericSend+0x1f0>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	e00a      	b.n	8002a30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a20:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <xQueueGenericSend+0x1f0>)
 8002a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a30:	f001 ff28 	bl	8004884 <vPortExitCritical>
				return pdPASS;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e063      	b.n	8002b00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a3e:	f001 ff21 	bl	8004884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e05c      	b.n	8002b00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 ffe5 	bl	8003a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a56:	2301      	movs	r3, #1
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a5a:	f001 ff13 	bl	8004884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a5e:	f000 fd5d 	bl	800351c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a62:	f001 fee1 	bl	8004828 <vPortEnterCritical>
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d103      	bne.n	8002a7c <xQueueGenericSend+0x164>
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a82:	b25b      	sxtb	r3, r3
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d103      	bne.n	8002a92 <xQueueGenericSend+0x17a>
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a92:	f001 fef7 	bl	8004884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a96:	1d3a      	adds	r2, r7, #4
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 ffd4 	bl	8003a4c <xTaskCheckForTimeOut>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d124      	bne.n	8002af4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aac:	f000 fa96 	bl	8002fdc <prvIsQueueFull>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d018      	beq.n	8002ae8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	3310      	adds	r3, #16
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fefe 	bl	80038c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac6:	f000 fa21 	bl	8002f0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002aca:	f000 fd35 	bl	8003538 <xTaskResumeAll>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f af7c 	bne.w	80029ce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <xQueueGenericSend+0x1f0>)
 8002ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	e772      	b.n	80029ce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aea:	f000 fa0f 	bl	8002f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002aee:	f000 fd23 	bl	8003538 <xTaskResumeAll>
 8002af2:	e76c      	b.n	80029ce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af6:	f000 fa09 	bl	8002f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002afa:	f000 fd1d 	bl	8003538 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002afe:	2300      	movs	r3, #0
		}
	}
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3738      	adds	r7, #56	; 0x38
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	; 0x38
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <xQueueGenericSendFromISR+0x2c>
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
 8002b36:	e7fe      	b.n	8002b36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <xQueueGenericSendFromISR+0x3a>
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <xQueueGenericSendFromISR+0x3e>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <xQueueGenericSendFromISR+0x40>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <xQueueGenericSendFromISR+0x58>
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	623b      	str	r3, [r7, #32]
 8002b62:	e7fe      	b.n	8002b62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d103      	bne.n	8002b72 <xQueueGenericSendFromISR+0x66>
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <xQueueGenericSendFromISR+0x6a>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <xQueueGenericSendFromISR+0x6c>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <xQueueGenericSendFromISR+0x84>
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e7fe      	b.n	8002b8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b90:	f001 ff04 	bl	800499c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b94:	f3ef 8211 	mrs	r2, BASEPRI
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	61ba      	str	r2, [r7, #24]
 8002baa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <xQueueGenericSendFromISR+0xb6>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d12c      	bne.n	8002c1c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd2:	f000 f90b 	bl	8002dec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d112      	bne.n	8002c06 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d016      	beq.n	8002c16 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	3324      	adds	r3, #36	; 0x24
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 feb5 	bl	800395c <xTaskRemoveFromEventList>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00e      	beq.n	8002c16 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e007      	b.n	8002c16 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	b25a      	sxtb	r2, r3
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c16:	2301      	movs	r3, #1
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c1a:	e001      	b.n	8002c20 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3738      	adds	r7, #56	; 0x38
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	; 0x30
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <xQueueReceive+0x2e>
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	e7fe      	b.n	8002c60 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d103      	bne.n	8002c70 <xQueueReceive+0x3c>
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <xQueueReceive+0x40>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <xQueueReceive+0x42>
 8002c74:	2300      	movs	r3, #0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <xQueueReceive+0x5a>
 8002c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	e7fe      	b.n	8002c8c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c8e:	f001 f81f 	bl	8003cd0 <xTaskGetSchedulerState>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <xQueueReceive+0x6a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <xQueueReceive+0x6e>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <xQueueReceive+0x70>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <xQueueReceive+0x88>
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e7fe      	b.n	8002cba <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cbc:	f001 fdb4 	bl	8004828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01f      	beq.n	8002d0c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd0:	f000 f8f6 	bl	8002ec0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	1e5a      	subs	r2, r3, #1
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00f      	beq.n	8002d04 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	3310      	adds	r3, #16
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fe37 	bl	800395c <xTaskRemoveFromEventList>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cf4:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <xQueueReceive+0x1b4>)
 8002cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d04:	f001 fdbe 	bl	8004884 <vPortExitCritical>
				return pdPASS;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e069      	b.n	8002de0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d12:	f001 fdb7 	bl	8004884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e062      	b.n	8002de0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d106      	bne.n	8002d2e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d20:	f107 0310 	add.w	r3, r7, #16
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fe7b 	bl	8003a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d2e:	f001 fda9 	bl	8004884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d32:	f000 fbf3 	bl	800351c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d36:	f001 fd77 	bl	8004828 <vPortEnterCritical>
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d103      	bne.n	8002d50 <xQueueReceive+0x11c>
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d103      	bne.n	8002d66 <xQueueReceive+0x132>
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d66:	f001 fd8d 	bl	8004884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d6a:	1d3a      	adds	r2, r7, #4
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fe6a 	bl	8003a4c <xTaskCheckForTimeOut>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d123      	bne.n	8002dc6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d80:	f000 f916 	bl	8002fb0 <prvIsQueueEmpty>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d017      	beq.n	8002dba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	3324      	adds	r3, #36	; 0x24
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fd94 	bl	80038c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9a:	f000 f8b7 	bl	8002f0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d9e:	f000 fbcb 	bl	8003538 <xTaskResumeAll>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d189      	bne.n	8002cbc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <xQueueReceive+0x1b4>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	e780      	b.n	8002cbc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dbc:	f000 f8a6 	bl	8002f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dc0:	f000 fbba 	bl	8003538 <xTaskResumeAll>
 8002dc4:	e77a      	b.n	8002cbc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dc8:	f000 f8a0 	bl	8002f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dcc:	f000 fbb4 	bl	8003538 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd2:	f000 f8ed 	bl	8002fb0 <prvIsQueueEmpty>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f43f af6f 	beq.w	8002cbc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3730      	adds	r7, #48	; 0x30
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10d      	bne.n	8002e26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d14d      	bne.n	8002eae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 ff78 	bl	8003d0c <xTaskPriorityDisinherit>
 8002e1c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	e043      	b.n	8002eae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d119      	bne.n	8002e60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6898      	ldr	r0, [r3, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	461a      	mov	r2, r3
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	f001 ffe4 	bl	8004e04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	441a      	add	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d32b      	bcc.n	8002eae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	e026      	b.n	8002eae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	68d8      	ldr	r0, [r3, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	f001 ffca 	bl	8004e04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	425b      	negs	r3, r3
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d207      	bcs.n	8002e9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	425b      	negs	r3, r3
 8002e96:	441a      	add	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d105      	bne.n	8002eae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002eb6:	697b      	ldr	r3, [r7, #20]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d018      	beq.n	8002f04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	441a      	add	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d303      	bcc.n	8002ef4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68d9      	ldr	r1, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	461a      	mov	r2, r3
 8002efe:	6838      	ldr	r0, [r7, #0]
 8002f00:	f001 ff80 	bl	8004e04 <memcpy>
	}
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f14:	f001 fc88 	bl	8004828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f20:	e011      	b.n	8002f46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3324      	adds	r3, #36	; 0x24
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fd14 	bl	800395c <xTaskRemoveFromEventList>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f3a:	f000 fde7 	bl	8003b0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	dce9      	bgt.n	8002f22 <prvUnlockQueue+0x16>
 8002f4e:	e000      	b.n	8002f52 <prvUnlockQueue+0x46>
					break;
 8002f50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	22ff      	movs	r2, #255	; 0xff
 8002f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f5a:	f001 fc93 	bl	8004884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f5e:	f001 fc63 	bl	8004828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f6a:	e011      	b.n	8002f90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3310      	adds	r3, #16
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fcef 	bl	800395c <xTaskRemoveFromEventList>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f84:	f000 fdc2 	bl	8003b0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	dce9      	bgt.n	8002f6c <prvUnlockQueue+0x60>
 8002f98:	e000      	b.n	8002f9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	22ff      	movs	r2, #255	; 0xff
 8002fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fa4:	f001 fc6e 	bl	8004884 <vPortExitCritical>
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fb8:	f001 fc36 	bl	8004828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e001      	b.n	8002fce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fce:	f001 fc59 	bl	8004884 <vPortExitCritical>

	return xReturn;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fe4:	f001 fc20 	bl	8004828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d102      	bne.n	8002ffa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e001      	b.n	8002ffe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ffe:	f001 fc41 	bl	8004884 <vPortExitCritical>

	return xReturn;
 8003002:	68fb      	ldr	r3, [r7, #12]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e014      	b.n	8003046 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800301c:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <vQueueAddToRegistry+0x4c>)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003028:	490b      	ldr	r1, [pc, #44]	; (8003058 <vQueueAddToRegistry+0x4c>)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <vQueueAddToRegistry+0x4c>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800303e:	e005      	b.n	800304c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b07      	cmp	r3, #7
 800304a:	d9e7      	bls.n	800301c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20001ed4 	.word	0x20001ed4

0800305c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800306c:	f001 fbdc 	bl	8004828 <vPortEnterCritical>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003076:	b25b      	sxtb	r3, r3
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d103      	bne.n	8003086 <vQueueWaitForMessageRestricted+0x2a>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308c:	b25b      	sxtb	r3, r3
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d103      	bne.n	800309c <vQueueWaitForMessageRestricted+0x40>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800309c:	f001 fbf2 	bl	8004884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc29 	bl	8003908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff28 	bl	8002f0c <prvUnlockQueue>
	}
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08e      	sub	sp, #56	; 0x38
 80030c8:	af04      	add	r7, sp, #16
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <xTaskCreateStatic+0x28>
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	623b      	str	r3, [r7, #32]
 80030ea:	e7fe      	b.n	80030ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <xTaskCreateStatic+0x42>
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e7fe      	b.n	8003104 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003106:	235c      	movs	r3, #92	; 0x5c
 8003108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b5c      	cmp	r3, #92	; 0x5c
 800310e:	d009      	beq.n	8003124 <xTaskCreateStatic+0x60>
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	e7fe      	b.n	8003122 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01e      	beq.n	8003168 <xTaskCreateStatic+0xa4>
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01b      	beq.n	8003168 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003138:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	2202      	movs	r2, #2
 800313e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003142:	2300      	movs	r3, #0
 8003144:	9303      	str	r3, [sp, #12]
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	9302      	str	r3, [sp, #8]
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f850 	bl	8003200 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003162:	f000 f8d3 	bl	800330c <prvAddNewTaskToReadyList>
 8003166:	e001      	b.n	800316c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800316c:	697b      	ldr	r3, [r7, #20]
	}
 800316e:	4618      	mov	r0, r3
 8003170:	3728      	adds	r7, #40	; 0x28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003176:	b580      	push	{r7, lr}
 8003178:	b08c      	sub	sp, #48	; 0x30
 800317a:	af04      	add	r7, sp, #16
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f001 fc42 	bl	8004a14 <pvPortMalloc>
 8003190:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00e      	beq.n	80031b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003198:	205c      	movs	r0, #92	; 0x5c
 800319a:	f001 fc3b 	bl	8004a14 <pvPortMalloc>
 800319e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
 80031ac:	e005      	b.n	80031ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f001 fcf2 	bl	8004b98 <vPortFree>
 80031b4:	e001      	b.n	80031ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d017      	beq.n	80031f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031c8:	88fa      	ldrh	r2, [r7, #6]
 80031ca:	2300      	movs	r3, #0
 80031cc:	9303      	str	r3, [sp, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	9302      	str	r3, [sp, #8]
 80031d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f80e 	bl	8003200 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031e4:	69f8      	ldr	r0, [r7, #28]
 80031e6:	f000 f891 	bl	800330c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	e002      	b.n	80031f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
 80031f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031f6:	69bb      	ldr	r3, [r7, #24]
	}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	461a      	mov	r2, r3
 8003218:	21a5      	movs	r1, #165	; 0xa5
 800321a:	f001 fdfe 	bl	8004e1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003228:	3b01      	subs	r3, #1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f023 0307 	bic.w	r3, r3, #7
 8003236:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <prvInitialiseNewTask+0x56>
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e7fe      	b.n	8003254 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e012      	b.n	8003282 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	7819      	ldrb	r1, [r3, #0]
 8003264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	3334      	adds	r3, #52	; 0x34
 800326c:	460a      	mov	r2, r1
 800326e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	4413      	add	r3, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3301      	adds	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	d9e9      	bls.n	800325c <prvInitialiseNewTask+0x5c>
 8003288:	e000      	b.n	800328c <prvInitialiseNewTask+0x8c>
		{
			break;
 800328a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	2b37      	cmp	r3, #55	; 0x37
 8003298:	d901      	bls.n	800329e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800329a:	2337      	movs	r3, #55	; 0x37
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	2200      	movs	r2, #0
 80032ae:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	3304      	adds	r3, #4
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff f9a0 	bl	80025fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	3318      	adds	r3, #24
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff f99b 	bl	80025fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	2200      	movs	r2, #0
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	68f9      	ldr	r1, [r7, #12]
 80032ec:	69b8      	ldr	r0, [r7, #24]
 80032ee:	f001 f9af 	bl	8004650 <pxPortInitialiseStack>
 80032f2:	4602      	mov	r2, r0
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003302:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003304:	bf00      	nop
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003314:	f001 fa88 	bl	8004828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <prvAddNewTaskToReadyList+0xc4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <prvAddNewTaskToReadyList+0xc4>)
 8003320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003322:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <prvAddNewTaskToReadyList+0xc8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800332a:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <prvAddNewTaskToReadyList+0xc8>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003330:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <prvAddNewTaskToReadyList+0xc4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d110      	bne.n	800335a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003338:	f000 fc0c 	bl	8003b54 <prvInitialiseTaskLists>
 800333c:	e00d      	b.n	800335a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <prvAddNewTaskToReadyList+0xcc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003346:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <prvAddNewTaskToReadyList+0xc8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	429a      	cmp	r2, r3
 8003352:	d802      	bhi.n	800335a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003354:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <prvAddNewTaskToReadyList+0xc8>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <prvAddNewTaskToReadyList+0xd0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3301      	adds	r3, #1
 8003360:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <prvAddNewTaskToReadyList+0xd0>)
 8003362:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <prvAddNewTaskToReadyList+0xd0>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <prvAddNewTaskToReadyList+0xd4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d903      	bls.n	8003380 <prvAddNewTaskToReadyList+0x74>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <prvAddNewTaskToReadyList+0xd4>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <prvAddNewTaskToReadyList+0xd8>)
 800338e:	441a      	add	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7ff f93b 	bl	8002612 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800339c:	f001 fa72 	bl	8004884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <prvAddNewTaskToReadyList+0xcc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <prvAddNewTaskToReadyList+0xc8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d207      	bcs.n	80033c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <prvAddNewTaskToReadyList+0xdc>)
 80033b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000bc0 	.word	0x20000bc0
 80033d4:	200006ec 	.word	0x200006ec
 80033d8:	20000bcc 	.word	0x20000bcc
 80033dc:	20000bdc 	.word	0x20000bdc
 80033e0:	20000bc8 	.word	0x20000bc8
 80033e4:	200006f0 	.word	0x200006f0
 80033e8:	e000ed04 	.word	0xe000ed04

080033ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033fe:	4b13      	ldr	r3, [pc, #76]	; (800344c <vTaskDelay+0x60>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <vTaskDelay+0x2e>
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	e7fe      	b.n	8003418 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800341a:	f000 f87f 	bl	800351c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800341e:	2100      	movs	r1, #0
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fdb7 	bl	8003f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003426:	f000 f887 	bl	8003538 <xTaskResumeAll>
 800342a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d107      	bne.n	8003442 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <vTaskDelay+0x64>)
 8003434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000be8 	.word	0x20000be8
 8003450:	e000ed04 	.word	0xe000ed04

08003454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003462:	463a      	mov	r2, r7
 8003464:	1d39      	adds	r1, r7, #4
 8003466:	f107 0308 	add.w	r3, r7, #8
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff f874 	bl	8002558 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	9202      	str	r2, [sp, #8]
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	2300      	movs	r3, #0
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	460a      	mov	r2, r1
 8003482:	4920      	ldr	r1, [pc, #128]	; (8003504 <vTaskStartScheduler+0xb0>)
 8003484:	4820      	ldr	r0, [pc, #128]	; (8003508 <vTaskStartScheduler+0xb4>)
 8003486:	f7ff fe1d 	bl	80030c4 <xTaskCreateStatic>
 800348a:	4602      	mov	r2, r0
 800348c:	4b1f      	ldr	r3, [pc, #124]	; (800350c <vTaskStartScheduler+0xb8>)
 800348e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <vTaskStartScheduler+0xb8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003498:	2301      	movs	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e001      	b.n	80034a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034a8:	f000 fdc8 	bl	800403c <xTimerCreateTimerTask>
 80034ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d115      	bne.n	80034e0 <vTaskStartScheduler+0x8c>
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <vTaskStartScheduler+0xbc>)
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <vTaskStartScheduler+0xc0>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <vTaskStartScheduler+0xc4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034da:	f001 f935 	bl	8004748 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034de:	e00d      	b.n	80034fc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d109      	bne.n	80034fc <vTaskStartScheduler+0xa8>
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e7fe      	b.n	80034fa <vTaskStartScheduler+0xa6>
}
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	08004e8c 	.word	0x08004e8c
 8003508:	08003b25 	.word	0x08003b25
 800350c:	20000be4 	.word	0x20000be4
 8003510:	20000be0 	.word	0x20000be0
 8003514:	20000bcc 	.word	0x20000bcc
 8003518:	20000bc4 	.word	0x20000bc4

0800351c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <vTaskSuspendAll+0x18>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a03      	ldr	r2, [pc, #12]	; (8003534 <vTaskSuspendAll+0x18>)
 8003528:	6013      	str	r3, [r2, #0]
}
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000be8 	.word	0x20000be8

08003538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003546:	4b41      	ldr	r3, [pc, #260]	; (800364c <xTaskResumeAll+0x114>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <xTaskResumeAll+0x2a>
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	e7fe      	b.n	8003560 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003562:	f001 f961 	bl	8004828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003566:	4b39      	ldr	r3, [pc, #228]	; (800364c <xTaskResumeAll+0x114>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3b01      	subs	r3, #1
 800356c:	4a37      	ldr	r2, [pc, #220]	; (800364c <xTaskResumeAll+0x114>)
 800356e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003570:	4b36      	ldr	r3, [pc, #216]	; (800364c <xTaskResumeAll+0x114>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d162      	bne.n	800363e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003578:	4b35      	ldr	r3, [pc, #212]	; (8003650 <xTaskResumeAll+0x118>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d05e      	beq.n	800363e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003580:	e02f      	b.n	80035e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003582:	4b34      	ldr	r3, [pc, #208]	; (8003654 <xTaskResumeAll+0x11c>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3318      	adds	r3, #24
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff f89a 	bl	80026c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3304      	adds	r3, #4
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff f895 	bl	80026c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <xTaskResumeAll+0x120>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d903      	bls.n	80035b2 <xTaskResumeAll+0x7a>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <xTaskResumeAll+0x120>)
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4a27      	ldr	r2, [pc, #156]	; (800365c <xTaskResumeAll+0x124>)
 80035c0:	441a      	add	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3304      	adds	r3, #4
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f7ff f822 	bl	8002612 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <xTaskResumeAll+0x128>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	429a      	cmp	r2, r3
 80035da:	d302      	bcc.n	80035e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035dc:	4b21      	ldr	r3, [pc, #132]	; (8003664 <xTaskResumeAll+0x12c>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <xTaskResumeAll+0x11c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1cb      	bne.n	8003582 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035f0:	f000 fb4a 	bl	8003c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035f4:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <xTaskResumeAll+0x130>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d010      	beq.n	8003622 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003600:	f000 f844 	bl	800368c <xTaskIncrementTick>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <xTaskResumeAll+0x12c>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f1      	bne.n	8003600 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <xTaskResumeAll+0x130>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <xTaskResumeAll+0x12c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800362a:	2301      	movs	r3, #1
 800362c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <xTaskResumeAll+0x134>)
 8003630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800363e:	f001 f921 	bl	8004884 <vPortExitCritical>

	return xAlreadyYielded;
 8003642:	68bb      	ldr	r3, [r7, #8]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000be8 	.word	0x20000be8
 8003650:	20000bc0 	.word	0x20000bc0
 8003654:	20000b80 	.word	0x20000b80
 8003658:	20000bc8 	.word	0x20000bc8
 800365c:	200006f0 	.word	0x200006f0
 8003660:	200006ec 	.word	0x200006ec
 8003664:	20000bd4 	.word	0x20000bd4
 8003668:	20000bd0 	.word	0x20000bd0
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <xTaskGetTickCount+0x18>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800367c:	687b      	ldr	r3, [r7, #4]
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	20000bc4 	.word	0x20000bc4

0800368c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003696:	4b51      	ldr	r3, [pc, #324]	; (80037dc <xTaskIncrementTick+0x150>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 808d 	bne.w	80037ba <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036a0:	4b4f      	ldr	r3, [pc, #316]	; (80037e0 <xTaskIncrementTick+0x154>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036a8:	4a4d      	ldr	r2, [pc, #308]	; (80037e0 <xTaskIncrementTick+0x154>)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11f      	bne.n	80036f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <xTaskIncrementTick+0x158>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <xTaskIncrementTick+0x46>
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	e7fe      	b.n	80036d0 <xTaskIncrementTick+0x44>
 80036d2:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <xTaskIncrementTick+0x158>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <xTaskIncrementTick+0x15c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a41      	ldr	r2, [pc, #260]	; (80037e4 <xTaskIncrementTick+0x158>)
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4a41      	ldr	r2, [pc, #260]	; (80037e8 <xTaskIncrementTick+0x15c>)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b41      	ldr	r3, [pc, #260]	; (80037ec <xTaskIncrementTick+0x160>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a3f      	ldr	r2, [pc, #252]	; (80037ec <xTaskIncrementTick+0x160>)
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	f000 faca 	bl	8003c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036f4:	4b3e      	ldr	r3, [pc, #248]	; (80037f0 <xTaskIncrementTick+0x164>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d34e      	bcc.n	800379c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036fe:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <xTaskIncrementTick+0x158>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <xTaskIncrementTick+0x80>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <xTaskIncrementTick+0x82>
 800370c:	2300      	movs	r3, #0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <xTaskIncrementTick+0x164>)
 8003714:	f04f 32ff 	mov.w	r2, #4294967295
 8003718:	601a      	str	r2, [r3, #0]
					break;
 800371a:	e03f      	b.n	800379c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800371c:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <xTaskIncrementTick+0x158>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	d203      	bcs.n	800373c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003734:	4a2e      	ldr	r2, [pc, #184]	; (80037f0 <xTaskIncrementTick+0x164>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6013      	str	r3, [r2, #0]
						break;
 800373a:	e02f      	b.n	800379c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	3304      	adds	r3, #4
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe ffc1 	bl	80026c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3318      	adds	r3, #24
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe ffb8 	bl	80026c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <xTaskIncrementTick+0x168>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d903      	bls.n	800376c <xTaskIncrementTick+0xe0>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <xTaskIncrementTick+0x168>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <xTaskIncrementTick+0x16c>)
 800377a:	441a      	add	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f7fe ff45 	bl	8002612 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <xTaskIncrementTick+0x170>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	429a      	cmp	r2, r3
 8003794:	d3b3      	bcc.n	80036fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003796:	2301      	movs	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800379a:	e7b0      	b.n	80036fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <xTaskIncrementTick+0x170>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a2:	4915      	ldr	r1, [pc, #84]	; (80037f8 <xTaskIncrementTick+0x16c>)
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d907      	bls.n	80037c4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	e004      	b.n	80037c4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <xTaskIncrementTick+0x174>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <xTaskIncrementTick+0x174>)
 80037c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <xTaskIncrementTick+0x178>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80037cc:	2301      	movs	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037d0:	697b      	ldr	r3, [r7, #20]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000be8 	.word	0x20000be8
 80037e0:	20000bc4 	.word	0x20000bc4
 80037e4:	20000b78 	.word	0x20000b78
 80037e8:	20000b7c 	.word	0x20000b7c
 80037ec:	20000bd8 	.word	0x20000bd8
 80037f0:	20000be0 	.word	0x20000be0
 80037f4:	20000bc8 	.word	0x20000bc8
 80037f8:	200006f0 	.word	0x200006f0
 80037fc:	200006ec 	.word	0x200006ec
 8003800:	20000bd0 	.word	0x20000bd0
 8003804:	20000bd4 	.word	0x20000bd4

08003808 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800380e:	4b27      	ldr	r3, [pc, #156]	; (80038ac <vTaskSwitchContext+0xa4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003816:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <vTaskSwitchContext+0xa8>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800381c:	e040      	b.n	80038a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800381e:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <vTaskSwitchContext+0xa8>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <vTaskSwitchContext+0xac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e00f      	b.n	800384c <vTaskSwitchContext+0x44>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <vTaskSwitchContext+0x3e>
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	e7fe      	b.n	8003844 <vTaskSwitchContext+0x3c>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3b01      	subs	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	491a      	ldr	r1, [pc, #104]	; (80038b8 <vTaskSwitchContext+0xb0>)
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0e5      	beq.n	800382c <vTaskSwitchContext+0x24>
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <vTaskSwitchContext+0xb0>)
 800386c:	4413      	add	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3308      	adds	r3, #8
 8003882:	429a      	cmp	r2, r3
 8003884:	d104      	bne.n	8003890 <vTaskSwitchContext+0x88>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <vTaskSwitchContext+0xb4>)
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4a06      	ldr	r2, [pc, #24]	; (80038b4 <vTaskSwitchContext+0xac>)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6013      	str	r3, [r2, #0]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000be8 	.word	0x20000be8
 80038b0:	20000bd4 	.word	0x20000bd4
 80038b4:	20000bc8 	.word	0x20000bc8
 80038b8:	200006f0 	.word	0x200006f0
 80038bc:	200006ec 	.word	0x200006ec

080038c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <vTaskPlaceOnEventList+0x24>
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e7fe      	b.n	80038e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <vTaskPlaceOnEventList+0x44>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3318      	adds	r3, #24
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fe feb3 	bl	8002658 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038f2:	2101      	movs	r1, #1
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	f000 fb4d 	bl	8003f94 <prvAddCurrentTaskToDelayedList>
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200006ec 	.word	0x200006ec

08003908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <vTaskPlaceOnEventListRestricted+0x26>
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e7fe      	b.n	800392c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <vTaskPlaceOnEventListRestricted+0x50>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3318      	adds	r3, #24
 8003934:	4619      	mov	r1, r3
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7fe fe6b 	bl	8002612 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003942:	f04f 33ff 	mov.w	r3, #4294967295
 8003946:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	68b8      	ldr	r0, [r7, #8]
 800394c:	f000 fb22 	bl	8003f94 <prvAddCurrentTaskToDelayedList>
	}
 8003950:	bf00      	nop
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	200006ec 	.word	0x200006ec

0800395c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <xTaskRemoveFromEventList+0x2a>
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e7fe      	b.n	8003984 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3318      	adds	r3, #24
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fe9c 	bl	80026c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <xTaskRemoveFromEventList+0xac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d11d      	bne.n	80039d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3304      	adds	r3, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fe93 	bl	80026c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <xTaskRemoveFromEventList+0xb0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d903      	bls.n	80039b6 <xTaskRemoveFromEventList+0x5a>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <xTaskRemoveFromEventList+0xb0>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <xTaskRemoveFromEventList+0xb4>)
 80039c4:	441a      	add	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7fe fe20 	bl	8002612 <vListInsertEnd>
 80039d2:	e005      	b.n	80039e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3318      	adds	r3, #24
 80039d8:	4619      	mov	r1, r3
 80039da:	480e      	ldr	r0, [pc, #56]	; (8003a14 <xTaskRemoveFromEventList+0xb8>)
 80039dc:	f7fe fe19 	bl	8002612 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <xTaskRemoveFromEventList+0xbc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d905      	bls.n	80039fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039ee:	2301      	movs	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <xTaskRemoveFromEventList+0xc0>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e001      	b.n	80039fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80039fe:	697b      	ldr	r3, [r7, #20]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000be8 	.word	0x20000be8
 8003a0c:	20000bc8 	.word	0x20000bc8
 8003a10:	200006f0 	.word	0x200006f0
 8003a14:	20000b80 	.word	0x20000b80
 8003a18:	200006ec 	.word	0x200006ec
 8003a1c:	20000bd4 	.word	0x20000bd4

08003a20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <vTaskInternalSetTimeOutState+0x24>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <vTaskInternalSetTimeOutState+0x28>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	605a      	str	r2, [r3, #4]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000bd8 	.word	0x20000bd8
 8003a48:	20000bc4 	.word	0x20000bc4

08003a4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <xTaskCheckForTimeOut+0x24>
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	e7fe      	b.n	8003a6e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <xTaskCheckForTimeOut+0x3e>
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e7fe      	b.n	8003a88 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003a8a:	f000 fecd 	bl	8004828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <xTaskCheckForTimeOut+0xb8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d102      	bne.n	8003aae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	e023      	b.n	8003af6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <xTaskCheckForTimeOut+0xbc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d007      	beq.n	8003aca <xTaskCheckForTimeOut+0x7e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d302      	bcc.n	8003aca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	e015      	b.n	8003af6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d20b      	bcs.n	8003aec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad2      	subs	r2, r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff9d 	bl	8003a20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e004      	b.n	8003af6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003af6:	f000 fec5 	bl	8004884 <vPortExitCritical>

	return xReturn;
 8003afa:	69fb      	ldr	r3, [r7, #28]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000bc4 	.word	0x20000bc4
 8003b08:	20000bd8 	.word	0x20000bd8

08003b0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <vTaskMissedYield+0x14>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000bd4 	.word	0x20000bd4

08003b24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b2c:	f000 f852 	bl	8003bd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <prvIdleTask+0x28>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d9f9      	bls.n	8003b2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <prvIdleTask+0x2c>)
 8003b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b48:	e7f0      	b.n	8003b2c <prvIdleTask+0x8>
 8003b4a:	bf00      	nop
 8003b4c:	200006f0 	.word	0x200006f0
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	e00c      	b.n	8003b7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <prvInitialiseTaskLists+0x60>)
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fd24 	bl	80025bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3301      	adds	r3, #1
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b37      	cmp	r3, #55	; 0x37
 8003b7e:	d9ef      	bls.n	8003b60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b80:	480d      	ldr	r0, [pc, #52]	; (8003bb8 <prvInitialiseTaskLists+0x64>)
 8003b82:	f7fe fd1b 	bl	80025bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b86:	480d      	ldr	r0, [pc, #52]	; (8003bbc <prvInitialiseTaskLists+0x68>)
 8003b88:	f7fe fd18 	bl	80025bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b8c:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <prvInitialiseTaskLists+0x6c>)
 8003b8e:	f7fe fd15 	bl	80025bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b92:	480c      	ldr	r0, [pc, #48]	; (8003bc4 <prvInitialiseTaskLists+0x70>)
 8003b94:	f7fe fd12 	bl	80025bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b98:	480b      	ldr	r0, [pc, #44]	; (8003bc8 <prvInitialiseTaskLists+0x74>)
 8003b9a:	f7fe fd0f 	bl	80025bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <prvInitialiseTaskLists+0x78>)
 8003ba0:	4a05      	ldr	r2, [pc, #20]	; (8003bb8 <prvInitialiseTaskLists+0x64>)
 8003ba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <prvInitialiseTaskLists+0x7c>)
 8003ba6:	4a05      	ldr	r2, [pc, #20]	; (8003bbc <prvInitialiseTaskLists+0x68>)
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200006f0 	.word	0x200006f0
 8003bb8:	20000b50 	.word	0x20000b50
 8003bbc:	20000b64 	.word	0x20000b64
 8003bc0:	20000b80 	.word	0x20000b80
 8003bc4:	20000b94 	.word	0x20000b94
 8003bc8:	20000bac 	.word	0x20000bac
 8003bcc:	20000b78 	.word	0x20000b78
 8003bd0:	20000b7c 	.word	0x20000b7c

08003bd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bda:	e019      	b.n	8003c10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bdc:	f000 fe24 	bl	8004828 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <prvCheckTasksWaitingTermination+0x4c>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fd6b 	bl	80026c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <prvCheckTasksWaitingTermination+0x50>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <prvCheckTasksWaitingTermination+0x50>)
 8003bfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <prvCheckTasksWaitingTermination+0x54>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <prvCheckTasksWaitingTermination+0x54>)
 8003c04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c06:	f000 fe3d 	bl	8004884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f80e 	bl	8003c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <prvCheckTasksWaitingTermination+0x54>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e1      	bne.n	8003bdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000b94 	.word	0x20000b94
 8003c24:	20000bc0 	.word	0x20000bc0
 8003c28:	20000ba8 	.word	0x20000ba8

08003c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 ffa8 	bl	8004b98 <vPortFree>
				vPortFree( pxTCB );
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 ffa5 	bl	8004b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c4e:	e017      	b.n	8003c80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d103      	bne.n	8003c62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 ff9c 	bl	8004b98 <vPortFree>
	}
 8003c60:	e00e      	b.n	8003c80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d009      	beq.n	8003c80 <prvDeleteTCB+0x54>
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e7fe      	b.n	8003c7e <prvDeleteTCB+0x52>
	}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <prvResetNextTaskUnblockTime+0x40>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <prvResetNextTaskUnblockTime+0x14>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <prvResetNextTaskUnblockTime+0x16>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <prvResetNextTaskUnblockTime+0x44>)
 8003ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003caa:	e008      	b.n	8003cbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <prvResetNextTaskUnblockTime+0x40>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <prvResetNextTaskUnblockTime+0x44>)
 8003cbc:	6013      	str	r3, [r2, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	20000b78 	.word	0x20000b78
 8003ccc:	20000be0 	.word	0x20000be0

08003cd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <xTaskGetSchedulerState+0x34>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	e008      	b.n	8003cf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce4:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <xTaskGetSchedulerState+0x38>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cec:	2302      	movs	r3, #2
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	e001      	b.n	8003cf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cf6:	687b      	ldr	r3, [r7, #4]
	}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000bcc 	.word	0x20000bcc
 8003d08:	20000be8 	.word	0x20000be8

08003d0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d054      	beq.n	8003dcc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d22:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <xTaskPriorityDisinherit+0xcc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d009      	beq.n	8003d40 <xTaskPriorityDisinherit+0x34>
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e7fe      	b.n	8003d3e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d109      	bne.n	8003d5c <xTaskPriorityDisinherit+0x50>
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	e7fe      	b.n	8003d5a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	1e5a      	subs	r2, r3, #1
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d02c      	beq.n	8003dcc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d128      	bne.n	8003dcc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fca2 	bl	80026c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <xTaskPriorityDisinherit+0xd0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d903      	bls.n	8003dac <xTaskPriorityDisinherit+0xa0>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <xTaskPriorityDisinherit+0xd0>)
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <xTaskPriorityDisinherit+0xd4>)
 8003dba:	441a      	add	r2, r3
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7fe fc25 	bl	8002612 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dcc:	697b      	ldr	r3, [r7, #20]
	}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200006ec 	.word	0x200006ec
 8003ddc:	20000bc8 	.word	0x20000bc8
 8003de0:	200006f0 	.word	0x200006f0

08003de4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8003dee:	f000 fd1b 	bl	8004828 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8003df2:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <ulTaskNotifyTake+0x88>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d113      	bne.n	8003e24 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <ulTaskNotifyTake+0x88>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	6838      	ldr	r0, [r7, #0]
 8003e10:	f000 f8c0 	bl	8003f94 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <ulTaskNotifyTake+0x8c>)
 8003e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003e24:	f000 fd2e 	bl	8004884 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003e28:	f000 fcfe 	bl	8004828 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <ulTaskNotifyTake+0x88>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00c      	beq.n	8003e54 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <ulTaskNotifyTake+0x88>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2200      	movs	r2, #0
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54
 8003e48:	e004      	b.n	8003e54 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <ulTaskNotifyTake+0x88>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	3a01      	subs	r2, #1
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <ulTaskNotifyTake+0x88>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8003e5e:	f000 fd11 	bl	8004884 <vPortExitCritical>

		return ulReturn;
 8003e62:	68fb      	ldr	r3, [r7, #12]
	}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	200006ec 	.word	0x200006ec
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <vTaskNotifyGiveFromISR+0x24>
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	e7fe      	b.n	8003e96 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e98:	f000 fd80 	bl	800499c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8003ea0:	f3ef 8211 	mrs	r2, BASEPRI
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	617a      	str	r2, [r7, #20]
 8003eb6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003eb8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eba:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ec2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003ed6:	7ffb      	ldrb	r3, [r7, #31]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d146      	bne.n	8003f6a <vTaskNotifyGiveFromISR+0xf6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	e7fe      	b.n	8003ef6 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef8:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <vTaskNotifyGiveFromISR+0x108>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d11d      	bne.n	8003f3c <vTaskNotifyGiveFromISR+0xc8>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	3304      	adds	r3, #4
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe fbdf 	bl	80026c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <vTaskNotifyGiveFromISR+0x10c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d903      	bls.n	8003f1e <vTaskNotifyGiveFromISR+0xaa>
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <vTaskNotifyGiveFromISR+0x10c>)
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <vTaskNotifyGiveFromISR+0x110>)
 8003f2c:	441a      	add	r2, r3
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7fe fb6c 	bl	8002612 <vListInsertEnd>
 8003f3a:	e005      	b.n	8003f48 <vTaskNotifyGiveFromISR+0xd4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	3318      	adds	r3, #24
 8003f40:	4619      	mov	r1, r3
 8003f42:	4811      	ldr	r0, [pc, #68]	; (8003f88 <vTaskNotifyGiveFromISR+0x114>)
 8003f44:	f7fe fb65 	bl	8002612 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <vTaskNotifyGiveFromISR+0x118>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d909      	bls.n	8003f6a <vTaskNotifyGiveFromISR+0xf6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <vTaskNotifyGiveFromISR+0xf0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e002      	b.n	8003f6a <vTaskNotifyGiveFromISR+0xf6>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <vTaskNotifyGiveFromISR+0x11c>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8003f74:	bf00      	nop
 8003f76:	3728      	adds	r7, #40	; 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000be8 	.word	0x20000be8
 8003f80:	20000bc8 	.word	0x20000bc8
 8003f84:	200006f0 	.word	0x200006f0
 8003f88:	20000b80 	.word	0x20000b80
 8003f8c:	200006ec 	.word	0x200006ec
 8003f90:	20000bd4 	.word	0x20000bd4

08003f94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f9e:	4b21      	ldr	r3, [pc, #132]	; (8004024 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe fb8c 	bl	80026c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d10a      	bne.n	8003fce <prvAddCurrentTaskToDelayedList+0x3a>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4819      	ldr	r0, [pc, #100]	; (800402c <prvAddCurrentTaskToDelayedList+0x98>)
 8003fc8:	f7fe fb23 	bl	8002612 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fcc:	e026      	b.n	800401c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d209      	bcs.n	8003ffa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f7fe fb30 	bl	8002658 <vListInsert>
}
 8003ff8:	e010      	b.n	800401c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ffa:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7fe fb26 	bl	8002658 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	d202      	bcs.n	800401c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000bc4 	.word	0x20000bc4
 8004028:	200006ec 	.word	0x200006ec
 800402c:	20000bac 	.word	0x20000bac
 8004030:	20000b7c 	.word	0x20000b7c
 8004034:	20000b78 	.word	0x20000b78
 8004038:	20000be0 	.word	0x20000be0

0800403c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	; 0x28
 8004040:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004046:	f000 fac3 	bl	80045d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <xTimerCreateTimerTask+0x80>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d021      	beq.n	8004096 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800405a:	1d3a      	adds	r2, r7, #4
 800405c:	f107 0108 	add.w	r1, r7, #8
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fa8f 	bl	8002588 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	9202      	str	r2, [sp, #8]
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	2302      	movs	r3, #2
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	460a      	mov	r2, r1
 800407c:	4910      	ldr	r1, [pc, #64]	; (80040c0 <xTimerCreateTimerTask+0x84>)
 800407e:	4811      	ldr	r0, [pc, #68]	; (80040c4 <xTimerCreateTimerTask+0x88>)
 8004080:	f7ff f820 	bl	80030c4 <xTaskCreateStatic>
 8004084:	4602      	mov	r2, r0
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <xTimerCreateTimerTask+0x8c>)
 8004088:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <xTimerCreateTimerTask+0x8c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004092:	2301      	movs	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	e7fe      	b.n	80040ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 80040b0:	697b      	ldr	r3, [r7, #20]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000c1c 	.word	0x20000c1c
 80040c0:	08004e94 	.word	0x08004e94
 80040c4:	080041e5 	.word	0x080041e5
 80040c8:	20000c20 	.word	0x20000c20

080040cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <xTimerGenericCommand+0x2c>
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	623b      	str	r3, [r7, #32]
 80040f6:	e7fe      	b.n	80040f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <xTimerGenericCommand+0x94>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d02a      	beq.n	8004156 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b05      	cmp	r3, #5
 8004110:	dc18      	bgt.n	8004144 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004112:	f7ff fddd 	bl	8003cd0 <xTaskGetSchedulerState>
 8004116:	4603      	mov	r3, r0
 8004118:	2b02      	cmp	r3, #2
 800411a:	d109      	bne.n	8004130 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800411c:	4b10      	ldr	r3, [pc, #64]	; (8004160 <xTimerGenericCommand+0x94>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	f107 0110 	add.w	r1, r7, #16
 8004124:	2300      	movs	r3, #0
 8004126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004128:	f7fe fbf6 	bl	8002918 <xQueueGenericSend>
 800412c:	6278      	str	r0, [r7, #36]	; 0x24
 800412e:	e012      	b.n	8004156 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <xTimerGenericCommand+0x94>)
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	f107 0110 	add.w	r1, r7, #16
 8004138:	2300      	movs	r3, #0
 800413a:	2200      	movs	r2, #0
 800413c:	f7fe fbec 	bl	8002918 <xQueueGenericSend>
 8004140:	6278      	str	r0, [r7, #36]	; 0x24
 8004142:	e008      	b.n	8004156 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <xTimerGenericCommand+0x94>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	f107 0110 	add.w	r1, r7, #16
 800414c:	2300      	movs	r3, #0
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	f7fe fcdc 	bl	8002b0c <xQueueGenericSendFromISR>
 8004154:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004158:	4618      	mov	r0, r3
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000c1c 	.word	0x20000c1c

08004164 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800416e:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <prvProcessExpiredTimer+0x7c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe faa3 	bl	80026c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d121      	bne.n	80041ce <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	18d1      	adds	r1, r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f000 f8c8 	bl	800432c <prvInsertTimerInActiveList>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d015      	beq.n	80041ce <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041a2:	2300      	movs	r3, #0
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	2300      	movs	r3, #0
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	2100      	movs	r1, #0
 80041ac:	6978      	ldr	r0, [r7, #20]
 80041ae:	f7ff ff8d 	bl	80040cc <xTimerGenericCommand>
 80041b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <prvProcessExpiredTimer+0x6a>
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e7fe      	b.n	80041cc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	4798      	blx	r3
}
 80041d6:	bf00      	nop
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000c14 	.word	0x20000c14

080041e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ec:	f107 0308 	add.w	r3, r7, #8
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f857 	bl	80042a4 <prvGetNextExpireTime>
 80041f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4619      	mov	r1, r3
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f803 	bl	8004208 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004202:	f000 f8d5 	bl	80043b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004206:	e7f1      	b.n	80041ec <prvTimerTask+0x8>

08004208 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004212:	f7ff f983 	bl	800351c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004216:	f107 0308 	add.w	r3, r7, #8
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f866 	bl	80042ec <prvSampleTimeNow>
 8004220:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d130      	bne.n	800428a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <prvProcessTimerOrBlockTask+0x3c>
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	429a      	cmp	r2, r3
 8004234:	d806      	bhi.n	8004244 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004236:	f7ff f97f 	bl	8003538 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800423a:	68f9      	ldr	r1, [r7, #12]
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ff91 	bl	8004164 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004242:	e024      	b.n	800428e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800424a:	4b13      	ldr	r3, [pc, #76]	; (8004298 <prvProcessTimerOrBlockTask+0x90>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <prvProcessTimerOrBlockTask+0x94>)
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	4619      	mov	r1, r3
 800426a:	f7fe fef7 	bl	800305c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800426e:	f7ff f963 	bl	8003538 <xTaskResumeAll>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004278:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <prvProcessTimerOrBlockTask+0x98>)
 800427a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	f3bf 8f6f 	isb	sy
}
 8004288:	e001      	b.n	800428e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800428a:	f7ff f955 	bl	8003538 <xTaskResumeAll>
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000c18 	.word	0x20000c18
 800429c:	20000c1c 	.word	0x20000c1c
 80042a0:	e000ed04 	.word	0xe000ed04

080042a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042ac:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <prvGetNextExpireTime+0x44>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bf0c      	ite	eq
 80042b6:	2301      	moveq	r3, #1
 80042b8:	2300      	movne	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <prvGetNextExpireTime+0x44>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e001      	b.n	80042da <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042da:	68fb      	ldr	r3, [r7, #12]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000c14 	.word	0x20000c14

080042ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042f4:	f7ff f9bc 	bl	8003670 <xTaskGetTickCount>
 80042f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <prvSampleTimeNow+0x3c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	429a      	cmp	r2, r3
 8004302:	d205      	bcs.n	8004310 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004304:	f000 f904 	bl	8004510 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e002      	b.n	8004316 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004316:	4a04      	ldr	r2, [pc, #16]	; (8004328 <prvSampleTimeNow+0x3c>)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800431c:	68fb      	ldr	r3, [r7, #12]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000c24 	.word	0x20000c24

0800432c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d812      	bhi.n	8004378 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	1ad2      	subs	r2, r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	429a      	cmp	r2, r3
 800435e:	d302      	bcc.n	8004366 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004360:	2301      	movs	r3, #1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e01b      	b.n	800439e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <prvInsertTimerInActiveList+0x7c>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3304      	adds	r3, #4
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f7fe f971 	bl	8002658 <vListInsert>
 8004376:	e012      	b.n	800439e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d206      	bcs.n	800438e <prvInsertTimerInActiveList+0x62>
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004388:	2301      	movs	r3, #1
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	e007      	b.n	800439e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <prvInsertTimerInActiveList+0x80>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3304      	adds	r3, #4
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f7fe f95d 	bl	8002658 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800439e:	697b      	ldr	r3, [r7, #20]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000c18 	.word	0x20000c18
 80043ac:	20000c14 	.word	0x20000c14

080043b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08e      	sub	sp, #56	; 0x38
 80043b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043b6:	e099      	b.n	80044ec <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da17      	bge.n	80043ee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	3304      	adds	r3, #4
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <prvProcessReceivedCommands+0x2e>
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	e7fe      	b.n	80043dc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e4:	6850      	ldr	r0, [r2, #4]
 80043e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e8:	6892      	ldr	r2, [r2, #8]
 80043ea:	4611      	mov	r1, r2
 80043ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db7a      	blt.n	80044ea <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe f95f 	bl	80026c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800440a:	463b      	mov	r3, r7
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff6d 	bl	80042ec <prvSampleTimeNow>
 8004412:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b09      	cmp	r3, #9
 8004418:	d868      	bhi.n	80044ec <prvProcessReceivedCommands+0x13c>
 800441a:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <prvProcessReceivedCommands+0x70>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004449 	.word	0x08004449
 8004424:	08004449 	.word	0x08004449
 8004428:	08004449 	.word	0x08004449
 800442c:	080044ed 	.word	0x080044ed
 8004430:	080044a3 	.word	0x080044a3
 8004434:	080044d9 	.word	0x080044d9
 8004438:	08004449 	.word	0x08004449
 800443c:	08004449 	.word	0x08004449
 8004440:	080044ed 	.word	0x080044ed
 8004444:	080044a3 	.word	0x080044a3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	18d1      	adds	r1, r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004456:	f7ff ff69 	bl	800432c <prvInsertTimerInActiveList>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d045      	beq.n	80044ec <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004466:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d13d      	bne.n	80044ec <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	441a      	add	r2, r3
 8004478:	2300      	movs	r3, #0
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	2100      	movs	r1, #0
 8004480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004482:	f7ff fe23 	bl	80040cc <xTimerGenericCommand>
 8004486:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d12e      	bne.n	80044ec <prvProcessReceivedCommands+0x13c>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e7fe      	b.n	80044a0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d109      	bne.n	80044c4 <prvProcessReceivedCommands+0x114>
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	e7fe      	b.n	80044c2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	18d1      	adds	r1, r2, r3
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d2:	f7ff ff2b 	bl	800432c <prvInsertTimerInActiveList>
					break;
 80044d6:	e009      	b.n	80044ec <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80044e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e4:	f000 fb58 	bl	8004b98 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044e8:	e000      	b.n	80044ec <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80044ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <prvProcessReceivedCommands+0x15c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	1d39      	adds	r1, r7, #4
 80044f2:	2200      	movs	r2, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe fb9d 	bl	8002c34 <xQueueReceive>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f47f af5b 	bne.w	80043b8 <prvProcessReceivedCommands+0x8>
	}
}
 8004502:	bf00      	nop
 8004504:	3730      	adds	r7, #48	; 0x30
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000c1c 	.word	0x20000c1c

08004510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004516:	e044      	b.n	80045a2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004518:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <prvSwitchTimerLists+0xb8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004522:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <prvSwitchTimerLists+0xb8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3304      	adds	r3, #4
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe f8c9 	bl	80026c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d12d      	bne.n	80045a2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4413      	add	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	429a      	cmp	r2, r3
 8004556:	d90e      	bls.n	8004576 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004564:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <prvSwitchTimerLists+0xb8>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7fe f872 	bl	8002658 <vListInsert>
 8004574:	e015      	b.n	80045a2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004576:	2300      	movs	r3, #0
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	2300      	movs	r3, #0
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	2100      	movs	r1, #0
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff fda3 	bl	80040cc <xTimerGenericCommand>
 8004586:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <prvSwitchTimerLists+0x92>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	e7fe      	b.n	80045a0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <prvSwitchTimerLists+0xb8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1b5      	bne.n	8004518 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <prvSwitchTimerLists+0xb8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <prvSwitchTimerLists+0xbc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <prvSwitchTimerLists+0xb8>)
 80045b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045ba:	4a04      	ldr	r2, [pc, #16]	; (80045cc <prvSwitchTimerLists+0xbc>)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	6013      	str	r3, [r2, #0]
}
 80045c0:	bf00      	nop
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000c14 	.word	0x20000c14
 80045cc:	20000c18 	.word	0x20000c18

080045d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045d6:	f000 f927 	bl	8004828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <prvCheckForValidListAndQueue+0x60>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d120      	bne.n	8004624 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045e2:	4814      	ldr	r0, [pc, #80]	; (8004634 <prvCheckForValidListAndQueue+0x64>)
 80045e4:	f7fd ffea 	bl	80025bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045e8:	4813      	ldr	r0, [pc, #76]	; (8004638 <prvCheckForValidListAndQueue+0x68>)
 80045ea:	f7fd ffe7 	bl	80025bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <prvCheckForValidListAndQueue+0x6c>)
 80045f0:	4a10      	ldr	r2, [pc, #64]	; (8004634 <prvCheckForValidListAndQueue+0x64>)
 80045f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <prvCheckForValidListAndQueue+0x70>)
 80045f6:	4a10      	ldr	r2, [pc, #64]	; (8004638 <prvCheckForValidListAndQueue+0x68>)
 80045f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045fa:	2300      	movs	r3, #0
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4b11      	ldr	r3, [pc, #68]	; (8004644 <prvCheckForValidListAndQueue+0x74>)
 8004600:	4a11      	ldr	r2, [pc, #68]	; (8004648 <prvCheckForValidListAndQueue+0x78>)
 8004602:	2110      	movs	r1, #16
 8004604:	200a      	movs	r0, #10
 8004606:	f7fe f8f1 	bl	80027ec <xQueueGenericCreateStatic>
 800460a:	4602      	mov	r2, r0
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <prvCheckForValidListAndQueue+0x60>)
 800460e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <prvCheckForValidListAndQueue+0x60>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <prvCheckForValidListAndQueue+0x60>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	490b      	ldr	r1, [pc, #44]	; (800464c <prvCheckForValidListAndQueue+0x7c>)
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fcf4 	bl	800300c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004624:	f000 f92e 	bl	8004884 <vPortExitCritical>
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000c1c 	.word	0x20000c1c
 8004634:	20000bec 	.word	0x20000bec
 8004638:	20000c00 	.word	0x20000c00
 800463c:	20000c14 	.word	0x20000c14
 8004640:	20000c18 	.word	0x20000c18
 8004644:	20000cc8 	.word	0x20000cc8
 8004648:	20000c28 	.word	0x20000c28
 800464c:	08004e9c 	.word	0x08004e9c

08004650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3b04      	subs	r3, #4
 8004660:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3b04      	subs	r3, #4
 800466e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 0201 	bic.w	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3b04      	subs	r3, #4
 800467e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <pxPortInitialiseStack+0x54>)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3b14      	subs	r3, #20
 800468a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b20      	subs	r3, #32
 8004696:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004698:	68fb      	ldr	r3, [r7, #12]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	080046a9 	.word	0x080046a9

080046a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <prvTaskExitError+0x4c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d009      	beq.n	80046d0 <prvTaskExitError+0x28>
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e7fe      	b.n	80046ce <prvTaskExitError+0x26>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046e2:	bf00      	nop
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0fc      	beq.n	80046e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	20000010 	.word	0x20000010
	...

08004700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004700:	4b07      	ldr	r3, [pc, #28]	; (8004720 <pxCurrentTCBConst2>)
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	6808      	ldr	r0, [r1, #0]
 8004706:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800470a:	f380 8809 	msr	PSP, r0
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8811 	msr	BASEPRI, r0
 800471a:	f04e 0e0d 	orr.w	lr, lr, #13
 800471e:	4770      	bx	lr

08004720 <pxCurrentTCBConst2>:
 8004720:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004728:	4806      	ldr	r0, [pc, #24]	; (8004744 <prvPortStartFirstTask+0x1c>)
 800472a:	6800      	ldr	r0, [r0, #0]
 800472c:	6800      	ldr	r0, [r0, #0]
 800472e:	f380 8808 	msr	MSP, r0
 8004732:	b662      	cpsie	i
 8004734:	b661      	cpsie	f
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	df00      	svc	0
 8004740:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004742:	bf00      	nop
 8004744:	e000ed08 	.word	0xe000ed08

08004748 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800474e:	4b31      	ldr	r3, [pc, #196]	; (8004814 <xPortStartScheduler+0xcc>)
 8004750:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	22ff      	movs	r2, #255	; 0xff
 800475e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004770:	b2da      	uxtb	r2, r3
 8004772:	4b29      	ldr	r3, [pc, #164]	; (8004818 <xPortStartScheduler+0xd0>)
 8004774:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004776:	4b29      	ldr	r3, [pc, #164]	; (800481c <xPortStartScheduler+0xd4>)
 8004778:	2207      	movs	r2, #7
 800477a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800477c:	e009      	b.n	8004792 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800477e:	4b27      	ldr	r3, [pc, #156]	; (800481c <xPortStartScheduler+0xd4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3b01      	subs	r3, #1
 8004784:	4a25      	ldr	r2, [pc, #148]	; (800481c <xPortStartScheduler+0xd4>)
 8004786:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479a:	2b80      	cmp	r3, #128	; 0x80
 800479c:	d0ef      	beq.n	800477e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800479e:	4b1f      	ldr	r3, [pc, #124]	; (800481c <xPortStartScheduler+0xd4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1c3 0307 	rsb	r3, r3, #7
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d009      	beq.n	80047be <xPortStartScheduler+0x76>
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	e7fe      	b.n	80047bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047be:	4b17      	ldr	r3, [pc, #92]	; (800481c <xPortStartScheduler+0xd4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <xPortStartScheduler+0xd4>)
 80047c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <xPortStartScheduler+0xd4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047d0:	4a12      	ldr	r2, [pc, #72]	; (800481c <xPortStartScheduler+0xd4>)
 80047d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <xPortStartScheduler+0xd8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0f      	ldr	r2, [pc, #60]	; (8004820 <xPortStartScheduler+0xd8>)
 80047e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047e8:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <xPortStartScheduler+0xd8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0c      	ldr	r2, [pc, #48]	; (8004820 <xPortStartScheduler+0xd8>)
 80047ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047f4:	f000 f8b0 	bl	8004958 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <xPortStartScheduler+0xdc>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047fe:	f7ff ff93 	bl	8004728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004802:	f7ff f801 	bl	8003808 <vTaskSwitchContext>
	prvTaskExitError();
 8004806:	f7ff ff4f 	bl	80046a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	e000e400 	.word	0xe000e400
 8004818:	20000d18 	.word	0x20000d18
 800481c:	20000d1c 	.word	0x20000d1c
 8004820:	e000ed20 	.word	0xe000ed20
 8004824:	20000010 	.word	0x20000010

08004828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004840:	4b0e      	ldr	r3, [pc, #56]	; (800487c <vPortEnterCritical+0x54>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3301      	adds	r3, #1
 8004846:	4a0d      	ldr	r2, [pc, #52]	; (800487c <vPortEnterCritical+0x54>)
 8004848:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <vPortEnterCritical+0x54>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d10e      	bne.n	8004870 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <vPortEnterCritical+0x58>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <vPortEnterCritical+0x48>
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	e7fe      	b.n	800486e <vPortEnterCritical+0x46>
	}
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000010 	.word	0x20000010
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <vPortExitCritical+0x48>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <vPortExitCritical+0x22>
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	e7fe      	b.n	80048a4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <vPortExitCritical+0x48>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	4a07      	ldr	r2, [pc, #28]	; (80048cc <vPortExitCritical+0x48>)
 80048ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <vPortExitCritical+0x48>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <vPortExitCritical+0x3e>
 80048b8:	2300      	movs	r3, #0
 80048ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	20000010 	.word	0x20000010

080048d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048d0:	f3ef 8009 	mrs	r0, PSP
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <pxCurrentTCBConst>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048e0:	6010      	str	r0, [r2, #0]
 80048e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048ea:	f380 8811 	msr	BASEPRI, r0
 80048ee:	f7fe ff8b 	bl	8003808 <vTaskSwitchContext>
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8811 	msr	BASEPRI, r0
 80048fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	6808      	ldr	r0, [r1, #0]
 8004902:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004906:	f380 8809 	msr	PSP, r0
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	4770      	bx	lr

08004910 <pxCurrentTCBConst>:
 8004910:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004930:	f7fe feac 	bl	800368c <xTaskIncrementTick>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <SysTick_Handler+0x3c>)
 800493c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vPortSetupTimerInterrupt+0x30>)
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004962:	4b0a      	ldr	r3, [pc, #40]	; (800498c <vPortSetupTimerInterrupt+0x34>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <vPortSetupTimerInterrupt+0x38>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a09      	ldr	r2, [pc, #36]	; (8004994 <vPortSetupTimerInterrupt+0x3c>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	099b      	lsrs	r3, r3, #6
 8004974:	4a08      	ldr	r2, [pc, #32]	; (8004998 <vPortSetupTimerInterrupt+0x40>)
 8004976:	3b01      	subs	r3, #1
 8004978:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800497a:	4b03      	ldr	r3, [pc, #12]	; (8004988 <vPortSetupTimerInterrupt+0x30>)
 800497c:	2207      	movs	r2, #7
 800497e:	601a      	str	r2, [r3, #0]
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr
 8004988:	e000e010 	.word	0xe000e010
 800498c:	e000e018 	.word	0xe000e018
 8004990:	20000004 	.word	0x20000004
 8004994:	10624dd3 	.word	0x10624dd3
 8004998:	e000e014 	.word	0xe000e014

0800499c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049a2:	f3ef 8305 	mrs	r3, IPSR
 80049a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b0f      	cmp	r3, #15
 80049ac:	d913      	bls.n	80049d6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ae:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <vPortValidateInterruptPriority+0x68>)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <vPortValidateInterruptPriority+0x6c>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	7afa      	ldrb	r2, [r7, #11]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d209      	bcs.n	80049d6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	607b      	str	r3, [r7, #4]
 80049d4:	e7fe      	b.n	80049d4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <vPortValidateInterruptPriority+0x70>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <vPortValidateInterruptPriority+0x74>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d909      	bls.n	80049fa <vPortValidateInterruptPriority+0x5e>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	e7fe      	b.n	80049f8 <vPortValidateInterruptPriority+0x5c>
	}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr
 8004a04:	e000e3f0 	.word	0xe000e3f0
 8004a08:	20000d18 	.word	0x20000d18
 8004a0c:	e000ed0c 	.word	0xe000ed0c
 8004a10:	20000d1c 	.word	0x20000d1c

08004a14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08a      	sub	sp, #40	; 0x28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a20:	f7fe fd7c 	bl	800351c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a24:	4b57      	ldr	r3, [pc, #348]	; (8004b84 <pvPortMalloc+0x170>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a2c:	f000 f90c 	bl	8004c48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a30:	4b55      	ldr	r3, [pc, #340]	; (8004b88 <pvPortMalloc+0x174>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 808c 	bne.w	8004b56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01c      	beq.n	8004a7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004a44:	2208      	movs	r2, #8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d013      	beq.n	8004a7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f023 0307 	bic.w	r3, r3, #7
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <pvPortMalloc+0x6a>
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e7fe      	b.n	8004a7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d068      	beq.n	8004b56 <pvPortMalloc+0x142>
 8004a84:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <pvPortMalloc+0x178>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d863      	bhi.n	8004b56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a8e:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <pvPortMalloc+0x17c>)
 8004a90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a92:	4b3f      	ldr	r3, [pc, #252]	; (8004b90 <pvPortMalloc+0x17c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a98:	e004      	b.n	8004aa4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d903      	bls.n	8004ab6 <pvPortMalloc+0xa2>
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f1      	bne.n	8004a9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ab6:	4b33      	ldr	r3, [pc, #204]	; (8004b84 <pvPortMalloc+0x170>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d04a      	beq.n	8004b56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	4413      	add	r3, r2
 8004ac8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	1ad2      	subs	r2, r2, r3
 8004ada:	2308      	movs	r3, #8
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d91e      	bls.n	8004b20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <pvPortMalloc+0xf4>
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e7fe      	b.n	8004b06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b1a:	69b8      	ldr	r0, [r7, #24]
 8004b1c:	f000 f8f6 	bl	8004d0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <pvPortMalloc+0x178>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <pvPortMalloc+0x178>)
 8004b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b2e:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <pvPortMalloc+0x178>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <pvPortMalloc+0x180>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d203      	bcs.n	8004b42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <pvPortMalloc+0x178>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <pvPortMalloc+0x180>)
 8004b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <pvPortMalloc+0x174>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b56:	f7fe fcef 	bl	8003538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <pvPortMalloc+0x164>
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e7fe      	b.n	8004b76 <pvPortMalloc+0x162>
	return pvReturn;
 8004b78:	69fb      	ldr	r3, [r7, #28]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3728      	adds	r7, #40	; 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20001928 	.word	0x20001928
 8004b88:	20001934 	.word	0x20001934
 8004b8c:	2000192c 	.word	0x2000192c
 8004b90:	20001920 	.word	0x20001920
 8004b94:	20001930 	.word	0x20001930

08004b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d046      	beq.n	8004c38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004baa:	2308      	movs	r3, #8
 8004bac:	425b      	negs	r3, r3
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <vPortFree+0xa8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <vPortFree+0x42>
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e7fe      	b.n	8004bd8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <vPortFree+0x5e>
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	e7fe      	b.n	8004bf4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <vPortFree+0xa8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d019      	beq.n	8004c38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d115      	bne.n	8004c38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <vPortFree+0xa8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	43db      	mvns	r3, r3
 8004c16:	401a      	ands	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c1c:	f7fe fc7e 	bl	800351c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <vPortFree+0xac>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4413      	add	r3, r2
 8004c2a:	4a06      	ldr	r2, [pc, #24]	; (8004c44 <vPortFree+0xac>)
 8004c2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c2e:	6938      	ldr	r0, [r7, #16]
 8004c30:	f000 f86c 	bl	8004d0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c34:	f7fe fc80 	bl	8003538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20001934 	.word	0x20001934
 8004c44:	2000192c 	.word	0x2000192c

08004c48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c54:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <prvHeapInit+0xac>)
 8004c56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3307      	adds	r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	4a1f      	ldr	r2, [pc, #124]	; (8004cf4 <prvHeapInit+0xac>)
 8004c78:	4413      	add	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c80:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <prvHeapInit+0xb0>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <prvHeapInit+0xb0>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c94:	2208      	movs	r2, #8
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <prvHeapInit+0xb4>)
 8004ca8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <prvHeapInit+0xb4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <prvHeapInit+0xb4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	1ad2      	subs	r2, r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <prvHeapInit+0xb4>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <prvHeapInit+0xb8>)
 8004cd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <prvHeapInit+0xbc>)
 8004cde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ce0:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <prvHeapInit+0xc0>)
 8004ce2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ce6:	601a      	str	r2, [r3, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000d20 	.word	0x20000d20
 8004cf8:	20001920 	.word	0x20001920
 8004cfc:	20001928 	.word	0x20001928
 8004d00:	20001930 	.word	0x20001930
 8004d04:	2000192c 	.word	0x2000192c
 8004d08:	20001934 	.word	0x20001934

08004d0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d14:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <prvInsertBlockIntoFreeList+0xa8>)
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e002      	b.n	8004d20 <prvInsertBlockIntoFreeList+0x14>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d8f7      	bhi.n	8004d1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d108      	bne.n	8004d4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	441a      	add	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	441a      	add	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d118      	bne.n	8004d94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <prvInsertBlockIntoFreeList+0xac>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d00d      	beq.n	8004d8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e008      	b.n	8004d9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <prvInsertBlockIntoFreeList+0xac>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e003      	b.n	8004d9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d002      	beq.n	8004daa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	20001920 	.word	0x20001920
 8004db8:	20001928 	.word	0x20001928

08004dbc <__libc_init_array>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	2500      	movs	r5, #0
 8004dc0:	4e0c      	ldr	r6, [pc, #48]	; (8004df4 <__libc_init_array+0x38>)
 8004dc2:	4c0d      	ldr	r4, [pc, #52]	; (8004df8 <__libc_init_array+0x3c>)
 8004dc4:	1ba4      	subs	r4, r4, r6
 8004dc6:	10a4      	asrs	r4, r4, #2
 8004dc8:	42a5      	cmp	r5, r4
 8004dca:	d109      	bne.n	8004de0 <__libc_init_array+0x24>
 8004dcc:	f000 f82e 	bl	8004e2c <_init>
 8004dd0:	2500      	movs	r5, #0
 8004dd2:	4e0a      	ldr	r6, [pc, #40]	; (8004dfc <__libc_init_array+0x40>)
 8004dd4:	4c0a      	ldr	r4, [pc, #40]	; (8004e00 <__libc_init_array+0x44>)
 8004dd6:	1ba4      	subs	r4, r4, r6
 8004dd8:	10a4      	asrs	r4, r4, #2
 8004dda:	42a5      	cmp	r5, r4
 8004ddc:	d105      	bne.n	8004dea <__libc_init_array+0x2e>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004de4:	4798      	blx	r3
 8004de6:	3501      	adds	r5, #1
 8004de8:	e7ee      	b.n	8004dc8 <__libc_init_array+0xc>
 8004dea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dee:	4798      	blx	r3
 8004df0:	3501      	adds	r5, #1
 8004df2:	e7f2      	b.n	8004dda <__libc_init_array+0x1e>
 8004df4:	08004f04 	.word	0x08004f04
 8004df8:	08004f04 	.word	0x08004f04
 8004dfc:	08004f04 	.word	0x08004f04
 8004e00:	08004f08 	.word	0x08004f08

08004e04 <memcpy>:
 8004e04:	b510      	push	{r4, lr}
 8004e06:	1e43      	subs	r3, r0, #1
 8004e08:	440a      	add	r2, r1
 8004e0a:	4291      	cmp	r1, r2
 8004e0c:	d100      	bne.n	8004e10 <memcpy+0xc>
 8004e0e:	bd10      	pop	{r4, pc}
 8004e10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e18:	e7f7      	b.n	8004e0a <memcpy+0x6>

08004e1a <memset>:
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d100      	bne.n	8004e24 <memset+0xa>
 8004e22:	4770      	bx	lr
 8004e24:	f803 1b01 	strb.w	r1, [r3], #1
 8004e28:	e7f9      	b.n	8004e1e <memset+0x4>
	...

08004e2c <_init>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr

08004e38 <_fini>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr
